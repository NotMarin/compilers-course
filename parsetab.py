
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORXORleftANDleftSHLSHRnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftLPARENRPARENrightNOTrightEXPONENTABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE CLASS COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXPONENT EXTERNAL FILE FOR FORWARD FUNCTION FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON uses_clause_opt block DOTuses_clause_opt : uses_clause\n                       | emptyunit_list : unit_list COMMA ID\n                 | IDuses_clause : USES unit_list SEMICOLONblock : declarations compound_statementdeclarations : declaration_list\n                    | emptydeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declaration\n                   | function_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n                  | const_definition SEMICOLONconst_definition : ID EQUAL constantformal_parameter_list_opt : LPAREN formal_parameter_list RPAREN\n                             | emptyformal_parameter_list : formal_parameter_list SEMICOLON formal_parameter\n                             | formal_parameterformal_parameter : id_list COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n                 | type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n            | array_type\n            | record_type\n            | class_type\n            | enumerated_typeclass_type : CLASS class_body ENDenumerated_type : LPAREN identifier_list RPARENidentifier_list : identifier_list COMMA ID\n                       | IDclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | class_memberclass_member : class_variable_declaration\n                    | constructor_declaration\n                    | class_function_declaration\n                    | class_procedure_declarationclass_variable_declaration : ID COLON type SEMICOLONconstructor_declaration : CONSTRUCTOR ID formal_parameter_list_opt SEMICOLONclass_function_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLONfunction_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLONprocedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLONclass_procedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLONsimple_type : subrange_type\n                   | type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n                  | field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n                       | predefined_typepredefined_type : INTEGER\n                       | REAL\n                       | BOOLEAN\n                       | STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement SEMICOLON\n                      | statement_list statement SEMICOLONstatement : simple_statement\n                 | structured_statementsimple_statement : assignment_statement\n                        | procedure_call_statement\n                        | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | variable DOT ID\n                | variable LBRACKET expression_list RBRACKETexpression_list : expression\n                       | expression_list COMMA expressionprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args_optional RPARENargs : args COMMA expression\n            | expressionstructured_statement : compound_statement\n                            | if_statement\n                            | while_statement\n                            | repeat_statement\n                            | for_statement\n                            | case_statement\n                            | record_assignmentif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementcase_statement : CASE expression OF case_element_list else_clause_optional ENDcase_element_list : case_element_list semicolon_optional case_element\n                         | case_elementcase_element : case_label_list COLON statementcase_label_list : case_label_list COMMA case_label\n                       | case_labelcase_label : constantelse_clause_optional : semicolon_optional ELSE statement semicolon_optional\n                            | emptysemicolon_optional : SEMICOLON\n                          | emptyrecord_assignment : ID DOT ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression SHL expression\n                  | expression SHR expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | NOT expression %prec NOT\n                  | expression EXPONENT expression \n                  | LPAREN expression RPAREN\n                  | function_call\n                  | variable\n                  | INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERALfunction_call : ID LPAREN args_optional RPARENargs_optional : args\n                     | emptyconstant : UNSIGNED_NUMBER\n                | sign UNSIGNED_NUMBER\n                | STRING_LITERAL\n                | constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n                       | REAL_CONSTsign : PLUS\n            | MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,19,20,21,22,23,28,30,31,34,37,43,44,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,71,73,74,76,80,82,83,84,85,87,88,89,90,91,92,93,94,96,98,99,110,111,112,129,132,138,139,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,174,175,176,178,182,183,184,185,186,187,189,190,191,194,198,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,227,228,229,230,231,239,240,242,243,248,255,256,257,258,259,260,261,264,265,266,267,268,270,278,281,282,283,284,286,287,288,289,290,292,293,297,298,301,],[3,25,33,36,39,40,41,64,33,-19,36,39,79,64,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,94,94,64,97,94,-18,114,128,-25,130,-34,114,33,-74,-75,94,141,94,94,94,-138,-139,-140,-141,-142,-83,64,169,94,33,188,193,-24,-33,114,-76,-82,-84,64,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-135,94,64,94,94,130,-20,114,33,188,-47,-48,-49,-50,-51,244,245,246,130,33,114,-85,94,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,94,-89,94,-155,-108,-66,114,-46,114,276,-99,64,-101,-143,94,94,-117,130,-116,-115,64,130,-65,-100,-106,-107,64,-109,114,-52,-53,114,-57,64,64,-104,-105,-54,]),'SEMICOLON':([3,24,25,27,28,35,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,69,72,75,77,79,80,81,82,89,90,91,92,93,94,96,101,102,103,104,105,106,107,108,114,115,116,118,119,120,121,122,123,124,125,130,131,133,135,136,139,140,141,144,163,166,179,195,196,197,200,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,228,230,231,237,238,241,244,246,247,249,251,252,255,256,257,258,261,267,271,272,273,275,277,278,281,282,283,284,292,293,294,295,296,297,298,],[4,42,-5,-7,-155,70,73,-155,-155,82,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-155,129,132,134,-28,-4,-74,139,-75,-138,-139,-140,-141,-142,-83,-155,175,-36,-37,-38,-39,-40,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,-26,-35,198,-30,-76,-82,-84,-155,-135,-155,239,-147,250,-27,253,-85,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,266,-108,-63,270,-41,-155,-155,-42,-60,-29,-31,-99,-155,-101,-143,-117,-155,-67,287,288,290,291,-100,-106,-107,-155,-109,-155,-155,266,-61,301,-104,-105,]),'USES':([4,],[8,]),'VAR':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,129,132,134,175,250,253,291,],[-155,19,-2,-3,19,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,19,-20,-56,19,-55,]),'CONST':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,129,132,134,175,250,253,291,],[-155,20,-2,-3,20,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,20,-20,-56,20,-55,]),'TYPE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,129,132,134,175,250,253,291,],[-155,21,-2,-3,21,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,21,-20,-56,21,-55,]),'PROCEDURE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,111,129,132,134,175,182,183,184,185,186,187,242,250,253,287,288,290,291,301,],[-155,22,-2,-3,22,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,191,-24,-33,22,-20,191,-47,-48,-49,-50,-51,-46,-56,22,-52,-53,-57,-55,-54,]),'FUNCTION':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,111,129,132,134,175,182,183,184,185,186,187,242,250,253,287,288,290,291,301,],[-155,23,-2,-3,23,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,190,-24,-33,23,-20,190,-47,-48,-49,-50,-51,-46,-56,23,-52,-53,-57,-55,-54,]),'BEGIN':([4,5,6,7,10,11,12,13,14,15,16,17,18,28,29,30,31,34,37,42,44,62,66,70,73,82,96,129,132,134,139,144,166,175,250,253,256,267,283,291,292,293,],[-155,-155,-2,-3,28,-8,-9,-11,-12,-13,-14,-15,-16,28,-10,-17,-19,-23,-32,-6,28,28,-18,-25,-34,-75,28,-24,-33,-155,-76,28,28,-20,-56,-155,28,28,28,-55,28,28,]),'DOT':([9,27,58,64,80,90,94,141,201,],[26,-7,84,98,-74,84,-83,-84,-85,]),'COMMA':([24,25,32,33,79,89,90,91,92,93,94,116,118,119,124,125,128,130,137,141,142,143,163,171,173,180,192,193,195,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,232,233,234,254,258,262,276,285,],[43,-5,68,-22,-4,-138,-139,-140,-141,-142,-83,-146,-148,-149,-150,-151,-21,-154,68,-84,202,-86,-135,229,-91,68,248,-44,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,268,-111,-112,-87,-143,-90,-43,-110,]),'IF':([28,44,62,82,96,139,144,166,256,267,283,292,293,],[60,60,60,-75,60,-76,60,60,60,60,60,60,60,]),'WHILE':([28,44,62,82,96,139,144,166,256,267,283,292,293,],[61,61,61,-75,61,-76,61,61,61,61,61,61,61,]),'REPEAT':([28,44,62,82,96,139,144,166,256,267,283,292,293,],[62,62,62,-75,62,-76,62,62,62,62,62,62,62,]),'FOR':([28,44,62,82,96,139,144,166,256,267,283,292,293,],[63,63,63,-75,63,-76,63,63,63,63,63,63,63,]),'CASE':([28,44,62,82,96,139,144,166,256,267,283,292,293,],[65,65,65,-75,65,-76,65,65,65,65,65,65,65,]),'COLON':([32,33,41,77,78,116,118,119,124,125,128,130,137,180,188,195,197,232,233,234,245,274,285,],[67,-22,-155,-28,138,-146,-148,-149,-150,-151,-21,-154,199,240,243,-147,-27,267,-111,-112,-155,289,-110,]),'EQUAL':([36,39,86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[71,74,153,-138,-139,-140,-141,-142,-83,153,153,153,-84,153,-135,153,153,-85,-118,-119,-120,-121,-122,-123,153,153,None,None,None,None,None,None,153,153,153,-136,-137,153,153,153,-143,153,153,153,153,]),'LPAREN':([40,41,60,61,64,65,67,74,83,85,87,88,94,99,138,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,167,168,199,202,227,229,240,243,244,245,246,259,260,286,289,],[76,76,88,88,99,88,112,112,88,88,88,88,165,88,112,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,112,88,88,88,112,112,76,76,76,88,88,112,112,]),'END':([44,46,47,48,49,50,51,52,53,54,55,56,57,59,80,82,89,90,91,92,93,94,139,140,141,144,163,166,177,178,181,182,183,184,185,186,187,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,228,230,231,239,242,255,256,257,258,261,263,265,266,267,270,278,281,282,283,284,287,288,290,292,293,294,297,298,299,300,301,],[80,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-74,-75,-138,-139,-140,-141,-142,-83,-76,-82,-84,-155,-135,-155,237,-64,241,-45,-47,-48,-49,-50,-51,-85,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,-155,-108,-66,-46,-99,-155,-101,-143,-117,281,-114,-115,-155,-65,-100,-106,-107,-155,-109,-52,-53,-57,-155,-155,-155,-104,-105,-113,-116,-54,]),'ELSE':([46,47,48,49,50,51,52,53,54,55,56,57,59,80,89,90,91,92,93,94,140,141,144,163,166,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,228,230,231,255,256,257,258,261,264,265,266,267,278,281,282,284,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-74,-138,-139,-140,-141,-142,-83,-82,-84,-155,-135,-155,-85,256,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,-155,-108,-99,-155,-101,-143,-117,283,-116,-115,-155,-100,-106,-107,-109,-155,-155,-104,-105,]),'STRING_LITERAL':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,83,85,87,88,89,90,91,92,93,94,99,138,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,174,176,194,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,227,228,229,230,231,240,243,255,256,257,258,259,260,261,264,265,266,267,268,278,281,282,284,286,289,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,93,93,93,118,118,118,-74,93,93,93,93,-138,-139,-140,-141,-142,-83,93,118,-82,-84,-155,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-135,93,-155,93,93,118,118,118,118,-85,93,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,93,-89,93,-155,-108,118,118,-99,-155,-101,-143,93,93,-117,118,-116,-115,-155,118,-100,-106,-107,-109,118,118,-155,-155,-104,-105,]),'INTEGER_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,83,85,87,88,89,90,91,92,93,94,99,117,126,127,138,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,174,176,194,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,227,228,229,230,231,240,243,255,256,257,258,259,260,261,264,265,266,267,268,278,281,282,284,286,289,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,91,91,91,124,124,124,-74,91,91,91,91,-138,-139,-140,-141,-142,-83,91,124,-152,-153,124,-82,-84,-155,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-135,91,-155,91,91,124,124,124,124,-85,91,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,91,-89,91,-155,-108,124,124,-99,-155,-101,-143,91,91,-117,124,-116,-115,-155,124,-100,-106,-107,-109,124,124,-155,-155,-104,-105,]),'REAL_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,83,85,87,88,89,90,91,92,93,94,99,117,126,127,138,140,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,174,176,194,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,227,228,229,230,231,240,243,255,256,257,258,259,260,261,264,265,266,267,268,278,281,282,284,286,289,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,92,92,92,125,125,125,-74,92,92,92,92,-138,-139,-140,-141,-142,-83,92,125,-152,-153,125,-82,-84,-155,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-135,92,-155,92,92,125,125,125,125,-85,92,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,92,-89,92,-155,-108,125,125,-99,-155,-101,-143,92,92,-117,125,-116,-115,-155,125,-100,-106,-107,-109,125,125,-155,-155,-104,-105,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,86,89,90,91,92,93,94,95,100,138,140,141,143,144,163,164,166,173,174,176,194,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,226,228,230,231,240,243,254,255,256,257,258,261,262,264,265,266,267,268,278,279,280,281,282,284,286,289,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,126,126,126,-74,145,-138,-139,-140,-141,-142,-83,145,145,126,145,-84,145,-155,-135,145,-155,145,126,126,126,126,-85,-155,-118,-119,-120,-121,-122,-123,145,145,145,145,145,145,145,145,145,145,145,-136,-137,-102,145,145,-89,-155,-108,126,126,145,-99,-155,-101,-143,145,145,126,-116,-115,-155,126,-100,145,145,-106,-107,-109,126,126,-155,-155,-104,-105,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,86,89,90,91,92,93,94,95,100,138,140,141,143,144,163,164,166,173,174,176,194,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,226,228,230,231,240,243,254,255,256,257,258,261,262,264,265,266,267,268,278,279,280,281,282,284,286,289,292,293,297,298,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,127,127,127,-74,146,-138,-139,-140,-141,-142,-83,146,146,127,146,-84,146,-155,-135,146,-155,146,127,127,127,127,-85,-155,-118,-119,-120,-121,-122,-123,146,146,146,146,146,146,146,146,146,146,146,-136,-137,-102,146,146,-89,-155,-108,127,127,146,-99,-155,-101,-143,146,146,127,-116,-115,-155,127,-100,146,146,-106,-107,-109,127,127,-155,-155,-104,-105,]),'ASSIGN':([58,64,97,141,169,201,],[83,-83,168,-84,227,-85,]),'LBRACKET':([58,64,90,94,109,141,201,],[85,-83,85,-83,176,-84,-85,]),'NOT':([60,61,65,83,85,87,88,99,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,167,168,202,227,229,259,260,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'ARRAY':([67,74,138,199,240,243,286,289,],[109,109,109,109,109,109,109,109,]),'RECORD':([67,74,138,199,240,243,286,289,],[110,110,110,110,110,110,110,110,]),'CLASS':([67,74,138,199,240,243,286,289,],[111,111,111,111,111,111,111,111,]),'INTEGER':([67,74,138,176,199,240,243,286,289,],[120,120,120,120,120,120,120,120,120,]),'REAL':([67,74,138,176,199,240,243,286,289,],[121,121,121,121,121,121,121,121,121,]),'BOOLEAN':([67,74,138,176,199,240,243,286,289,],[122,122,122,122,122,122,122,122,122,]),'STRING':([67,74,138,176,199,240,243,286,289,],[123,123,123,123,123,123,123,123,123,]),'UNTIL':([82,96,139,],[-75,167,-76,]),'THEN':([86,89,90,91,92,93,94,141,163,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,258,],[144,-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,]),'TIMES':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[147,-138,-139,-140,-141,-142,-83,147,147,147,-84,147,-135,147,147,-85,147,147,-120,-121,-122,-123,147,147,147,147,147,147,147,147,147,147,147,-136,-137,147,147,147,-143,147,147,147,147,]),'DIVIDE':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[148,-138,-139,-140,-141,-142,-83,148,148,148,-84,148,-135,148,148,-85,148,148,-120,-121,-122,-123,148,148,148,148,148,148,148,148,148,148,148,-136,-137,148,148,148,-143,148,148,148,148,]),'DIVIDE_INT':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[149,-138,-139,-140,-141,-142,-83,149,149,149,-84,149,-135,149,149,-85,149,149,-120,-121,-122,-123,149,149,149,149,149,149,149,149,149,149,149,-136,-137,149,149,149,-143,149,149,149,149,]),'MODULO':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[150,-138,-139,-140,-141,-142,-83,150,150,150,-84,150,-135,150,150,-85,150,150,-120,-121,-122,-123,150,150,150,150,150,150,150,150,150,150,150,-136,-137,150,150,150,-143,150,150,150,150,]),'SHL':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[151,-138,-139,-140,-141,-142,-83,151,151,151,-84,151,-135,151,151,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,151,151,151,-136,-137,151,151,151,-143,151,151,151,151,]),'SHR':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[152,-138,-139,-140,-141,-142,-83,152,152,152,-84,152,-135,152,152,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,152,152,152,-136,-137,152,152,152,-143,152,152,152,152,]),'NEQUAL':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[154,-138,-139,-140,-141,-142,-83,154,154,154,-84,154,-135,154,154,-85,-118,-119,-120,-121,-122,-123,154,154,None,None,None,None,None,None,154,154,154,-136,-137,154,154,154,-143,154,154,154,154,]),'LT':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[155,-138,-139,-140,-141,-142,-83,155,155,155,-84,155,-135,155,155,-85,-118,-119,-120,-121,-122,-123,155,155,None,None,None,None,None,None,155,155,155,-136,-137,155,155,155,-143,155,155,155,155,]),'GT':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[156,-138,-139,-140,-141,-142,-83,156,156,156,-84,156,-135,156,156,-85,-118,-119,-120,-121,-122,-123,156,156,None,None,None,None,None,None,156,156,156,-136,-137,156,156,156,-143,156,156,156,156,]),'LE':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[157,-138,-139,-140,-141,-142,-83,157,157,157,-84,157,-135,157,157,-85,-118,-119,-120,-121,-122,-123,157,157,None,None,None,None,None,None,157,157,157,-136,-137,157,157,157,-143,157,157,157,157,]),'GE':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[158,-138,-139,-140,-141,-142,-83,158,158,158,-84,158,-135,158,158,-85,-118,-119,-120,-121,-122,-123,158,158,None,None,None,None,None,None,158,158,158,-136,-137,158,158,158,-143,158,158,158,158,]),'AND':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[159,-138,-139,-140,-141,-142,-83,159,159,159,-84,159,-135,159,159,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,159,159,-136,-137,159,159,159,-143,159,159,159,159,]),'OR':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[160,-138,-139,-140,-141,-142,-83,160,160,160,-84,160,-135,160,160,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,160,160,160,-143,160,160,160,160,]),'XOR':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[161,-138,-139,-140,-141,-142,-83,161,161,161,-84,161,-135,161,161,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,161,161,161,-143,161,161,161,161,]),'EXPONENT':([86,89,90,91,92,93,94,95,100,140,141,143,163,164,173,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,254,258,261,262,279,280,],[162,-138,-139,-140,-141,-142,-83,162,162,162,-84,162,162,162,162,-85,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,-137,162,162,162,-143,162,162,162,162,]),'DO':([89,90,91,92,93,94,95,141,163,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,258,279,280,],[-138,-139,-140,-141,-142,-83,166,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,292,293,]),'OF':([89,90,91,92,93,94,100,141,163,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,258,269,],[-138,-139,-140,-141,-142,-83,174,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,286,]),'RBRACKET':([89,90,91,92,93,94,107,108,114,115,116,118,119,120,121,122,123,124,125,130,141,142,143,163,195,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,235,236,249,254,258,],[-138,-139,-140,-141,-142,-83,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,-84,201,-86,-135,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,269,-62,-60,-87,-143,]),'RPAREN':([89,90,91,92,93,94,99,102,103,104,105,106,107,108,114,115,116,118,119,120,121,122,123,124,125,130,135,136,141,163,164,165,170,171,172,173,192,193,195,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,237,241,247,249,251,252,258,262,276,295,],[-138,-139,-140,-141,-142,-83,-155,-36,-37,-38,-39,-40,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,197,-30,-84,-135,222,-155,228,-144,-145,-91,247,-44,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,258,-63,-41,-42,-60,-29,-31,-143,-90,-43,-61,]),'TO':([89,90,91,92,93,94,141,163,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,258,],[-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,259,-143,]),'DOWNTO':([89,90,91,92,93,94,141,163,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,258,],[-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,260,-143,]),'CONSTRUCTOR':([111,182,183,184,185,186,187,242,287,288,290,301,],[189,189,-47,-48,-49,-50,-51,-46,-52,-53,-57,-54,]),'DOTDOT':([113,114,116,118,119,124,125,195,],[194,-154,-146,-148,-149,-150,-151,-147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_clause_opt':([4,],[5,]),'uses_clause':([4,],[6,]),'empty':([4,5,28,40,41,44,62,96,99,134,144,165,166,203,230,244,245,246,253,256,267,283,292,293,294,],[7,12,50,77,77,50,50,50,172,12,50,172,50,257,265,77,77,77,12,50,50,50,50,50,300,]),'block':([5,134,253,],[9,196,277,]),'declarations':([5,134,253,],[10,10,10,]),'declaration_list':([5,134,253,],[11,11,11,]),'declaration':([5,11,134,253,],[13,29,13,13,]),'var_declaration':([5,11,134,253,],[14,14,14,14,]),'const_declaration':([5,11,134,253,],[15,15,15,15,]),'type_declaration':([5,11,134,253,],[16,16,16,16,]),'procedure_declaration':([5,11,134,253,],[17,17,17,17,]),'function_declaration':([5,11,134,253,],[18,18,18,18,]),'unit_list':([8,],[24,]),'compound_statement':([10,28,44,62,96,144,166,256,267,283,292,293,],[27,51,51,51,51,51,51,51,51,51,51,51,]),'var_declaration_list':([19,],[30,]),'var_decl':([19,30,],[31,66,]),'id_list':([19,30,76,110,178,198,],[32,32,137,180,180,137,]),'const_list':([20,],[34,]),'const_definition':([20,34,],[35,69,]),'type_list':([21,],[37,]),'type_definition':([21,37,],[38,72,]),'statement_list':([28,62,],[44,96,]),'statement':([28,44,62,96,144,166,256,267,283,292,293,],[45,81,45,81,203,224,278,284,294,297,298,]),'simple_statement':([28,44,62,96,144,166,256,267,283,292,293,],[46,46,46,46,46,46,46,46,46,46,46,]),'structured_statement':([28,44,62,96,144,166,256,267,283,292,293,],[47,47,47,47,47,47,47,47,47,47,47,]),'assignment_statement':([28,44,62,96,144,166,256,267,283,292,293,],[48,48,48,48,48,48,48,48,48,48,48,]),'procedure_call_statement':([28,44,62,96,144,166,256,267,283,292,293,],[49,49,49,49,49,49,49,49,49,49,49,]),'if_statement':([28,44,62,96,144,166,256,267,283,292,293,],[52,52,52,52,52,52,52,52,52,52,52,]),'while_statement':([28,44,62,96,144,166,256,267,283,292,293,],[53,53,53,53,53,53,53,53,53,53,53,]),'repeat_statement':([28,44,62,96,144,166,256,267,283,292,293,],[54,54,54,54,54,54,54,54,54,54,54,]),'for_statement':([28,44,62,96,144,166,256,267,283,292,293,],[55,55,55,55,55,55,55,55,55,55,55,]),'case_statement':([28,44,62,96,144,166,256,267,283,292,293,],[56,56,56,56,56,56,56,56,56,56,56,]),'record_assignment':([28,44,62,96,144,166,256,267,283,292,293,],[57,57,57,57,57,57,57,57,57,57,57,]),'variable':([28,44,60,61,62,65,83,85,87,88,96,99,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,166,167,168,202,227,229,256,259,260,267,283,292,293,],[58,58,90,90,58,90,90,90,90,90,58,90,58,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,58,90,90,90,90,90,58,90,90,58,58,58,58,]),'procedure_call':([28,44,62,96,144,166,256,267,283,292,293,],[59,59,59,59,59,59,59,59,59,59,59,]),'formal_parameter_list_opt':([40,41,244,245,246,],[75,78,273,274,275,]),'expression':([60,61,65,83,85,87,88,99,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,167,168,202,227,229,259,260,],[86,95,100,140,143,163,164,173,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,173,225,226,254,261,262,279,280,]),'function_call':([60,61,65,83,85,87,88,99,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,165,167,168,202,227,229,259,260,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'type':([67,74,138,199,240,243,286,289,],[101,133,200,252,271,272,295,296,]),'simple_type':([67,74,138,176,199,240,243,286,289,],[102,102,102,236,102,102,102,102,102,]),'array_type':([67,74,138,199,240,243,286,289,],[103,103,103,103,103,103,103,103,]),'record_type':([67,74,138,199,240,243,286,289,],[104,104,104,104,104,104,104,104,]),'class_type':([67,74,138,199,240,243,286,289,],[105,105,105,105,105,105,105,105,]),'enumerated_type':([67,74,138,199,240,243,286,289,],[106,106,106,106,106,106,106,106,]),'subrange_type':([67,74,138,176,199,240,243,286,289,],[107,107,107,107,107,107,107,107,107,]),'type_identifier':([67,74,138,176,199,240,243,286,289,],[108,108,108,108,108,108,108,108,108,]),'constant':([67,71,74,138,174,176,194,199,240,243,264,268,286,289,],[113,131,113,113,234,113,249,113,113,113,234,234,113,113,]),'predefined_type':([67,74,138,176,199,240,243,286,289,],[115,115,115,115,115,115,115,115,115,]),'UNSIGNED_NUMBER':([67,71,74,117,138,174,176,194,199,240,243,264,268,286,289,],[116,116,116,195,116,116,116,116,116,116,116,116,116,116,116,]),'sign':([67,71,74,138,174,176,194,199,240,243,264,268,286,289,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'constant_identifier':([67,71,74,138,174,176,194,199,240,243,264,268,286,289,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'formal_parameter_list':([76,],[135,]),'formal_parameter':([76,198,],[136,251,]),'expression_list':([85,],[142,]),'args_optional':([99,165,],[170,223,]),'args':([99,165,],[171,171,]),'record_fields':([110,],[177,]),'field_list':([110,],[178,]),'field_declaration':([110,178,],[179,238,]),'class_body':([111,],[181,]),'class_member_list':([111,],[182,]),'class_member':([111,182,],[183,242,]),'class_variable_declaration':([111,182,],[184,184,]),'constructor_declaration':([111,182,],[185,185,]),'class_function_declaration':([111,182,],[186,186,]),'class_procedure_declaration':([111,182,],[187,187,]),'identifier_list':([112,],[192,]),'case_element_list':([174,],[230,]),'case_element':([174,264,],[231,282,]),'case_label_list':([174,264,],[232,232,]),'case_label':([174,264,268,],[233,233,285,]),'index_type':([176,],[235,]),'else_part':([203,],[255,]),'else_clause_optional':([230,],[263,]),'semicolon_optional':([230,294,],[264,299,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT','program',6,'p_program','mini_pascal_parser.py',28),
  ('uses_clause_opt -> uses_clause','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',32),
  ('uses_clause_opt -> empty','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',33),
  ('unit_list -> unit_list COMMA ID','unit_list',3,'p_unit_list','mini_pascal_parser.py',38),
  ('unit_list -> ID','unit_list',1,'p_unit_list','mini_pascal_parser.py',39),
  ('uses_clause -> USES unit_list SEMICOLON','uses_clause',3,'p_uses_clause','mini_pascal_parser.py',43),
  ('block -> declarations compound_statement','block',2,'p_block','mini_pascal_parser.py',48),
  ('declarations -> declaration_list','declarations',1,'p_declarations','mini_pascal_parser.py',53),
  ('declarations -> empty','declarations',1,'p_declarations','mini_pascal_parser.py',54),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','mini_pascal_parser.py',58),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','mini_pascal_parser.py',59),
  ('declaration -> var_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',63),
  ('declaration -> const_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',64),
  ('declaration -> type_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',65),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',66),
  ('declaration -> function_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',67),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','mini_pascal_parser.py',71),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','mini_pascal_parser.py',75),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','mini_pascal_parser.py',76),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','mini_pascal_parser.py',80),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','mini_pascal_parser.py',84),
  ('id_list -> ID','id_list',1,'p_id_list','mini_pascal_parser.py',85),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','mini_pascal_parser.py',89),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','mini_pascal_parser.py',93),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','mini_pascal_parser.py',94),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','mini_pascal_parser.py',98),
  ('formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN','formal_parameter_list_opt',3,'p_formal_parameter_list_opt','mini_pascal_parser.py',110),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_parameter_list_opt','mini_pascal_parser.py',111),
  ('formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','mini_pascal_parser.py',115),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','mini_pascal_parser.py',116),
  ('formal_parameter -> id_list COLON type','formal_parameter',3,'p_formal_parameter','mini_pascal_parser.py',120),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','mini_pascal_parser.py',125),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','mini_pascal_parser.py',129),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','mini_pascal_parser.py',130),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','mini_pascal_parser.py',134),
  ('type -> simple_type','type',1,'p_type','mini_pascal_parser.py',139),
  ('type -> array_type','type',1,'p_type','mini_pascal_parser.py',140),
  ('type -> record_type','type',1,'p_type','mini_pascal_parser.py',141),
  ('type -> class_type','type',1,'p_type','mini_pascal_parser.py',142),
  ('type -> enumerated_type','type',1,'p_type','mini_pascal_parser.py',143),
  ('class_type -> CLASS class_body END','class_type',3,'p_class_type','mini_pascal_parser.py',147),
  ('enumerated_type -> LPAREN identifier_list RPAREN','enumerated_type',3,'p_enumerated_type','mini_pascal_parser.py',151),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list','mini_pascal_parser.py',155),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','mini_pascal_parser.py',156),
  ('class_body -> class_member_list','class_body',1,'p_class_body','mini_pascal_parser.py',160),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','mini_pascal_parser.py',164),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','mini_pascal_parser.py',165),
  ('class_member -> class_variable_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',168),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',169),
  ('class_member -> class_function_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',170),
  ('class_member -> class_procedure_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',171),
  ('class_variable_declaration -> ID COLON type SEMICOLON','class_variable_declaration',4,'p_class_variable_declaration','mini_pascal_parser.py',175),
  ('constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON','constructor_declaration',4,'p_constructor_declaration','mini_pascal_parser.py',179),
  ('class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON','class_function_declaration',6,'p_class_function_declaration','mini_pascal_parser.py',182),
  ('function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','mini_pascal_parser.py',185),
  ('procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON','procedure_declaration',6,'p_procedure_declaration','mini_pascal_parser.py',189),
  ('class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON','class_procedure_declaration',4,'p_class_procedure_declaration','mini_pascal_parser.py',194),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','mini_pascal_parser.py',199),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','mini_pascal_parser.py',200),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','mini_pascal_parser.py',204),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','mini_pascal_parser.py',208),
  ('index_type -> simple_type','index_type',1,'p_index_type','mini_pascal_parser.py',212),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','mini_pascal_parser.py',216),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','mini_pascal_parser.py',220),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','mini_pascal_parser.py',224),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','mini_pascal_parser.py',225),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','mini_pascal_parser.py',229),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',233),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',234),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',238),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',239),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',240),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',241),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','mini_pascal_parser.py',246),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','mini_pascal_parser.py',250),
  ('statement_list -> statement_list statement SEMICOLON','statement_list',3,'p_statement_list','mini_pascal_parser.py',251),
  ('statement -> simple_statement','statement',1,'p_statement','mini_pascal_parser.py',256),
  ('statement -> structured_statement','statement',1,'p_statement','mini_pascal_parser.py',257),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',261),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',262),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',263),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','mini_pascal_parser.py',267),
  ('variable -> ID','variable',1,'p_variable','mini_pascal_parser.py',271),
  ('variable -> variable DOT ID','variable',3,'p_variable','mini_pascal_parser.py',272),
  ('variable -> variable LBRACKET expression_list RBRACKET','variable',4,'p_variable','mini_pascal_parser.py',273),
  ('expression_list -> expression','expression_list',1,'p_expression_list','mini_pascal_parser.py',277),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','mini_pascal_parser.py',278),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','mini_pascal_parser.py',282),
  ('procedure_call -> ID LPAREN args_optional RPAREN','procedure_call',4,'p_procedure_call','mini_pascal_parser.py',286),
  ('args -> args COMMA expression','args',3,'p_args','mini_pascal_parser.py',290),
  ('args -> expression','args',1,'p_args','mini_pascal_parser.py',291),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',295),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',296),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',297),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',298),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',299),
  ('structured_statement -> case_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',300),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',301),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','mini_pascal_parser.py',305),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','mini_pascal_parser.py',309),
  ('else_part -> empty','else_part',1,'p_else_part','mini_pascal_parser.py',310),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','mini_pascal_parser.py',314),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','mini_pascal_parser.py',318),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',322),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',323),
  ('case_statement -> CASE expression OF case_element_list else_clause_optional END','case_statement',6,'p_case_statement','mini_pascal_parser.py',327),
  ('case_element_list -> case_element_list semicolon_optional case_element','case_element_list',3,'p_case_element_list','mini_pascal_parser.py',331),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list','mini_pascal_parser.py',332),
  ('case_element -> case_label_list COLON statement','case_element',3,'p_case_element','mini_pascal_parser.py',336),
  ('case_label_list -> case_label_list COMMA case_label','case_label_list',3,'p_case_label_list','mini_pascal_parser.py',340),
  ('case_label_list -> case_label','case_label_list',1,'p_case_label_list','mini_pascal_parser.py',341),
  ('case_label -> constant','case_label',1,'p_case_label','mini_pascal_parser.py',345),
  ('else_clause_optional -> semicolon_optional ELSE statement semicolon_optional','else_clause_optional',4,'p_else_clause_optional','mini_pascal_parser.py',349),
  ('else_clause_optional -> empty','else_clause_optional',1,'p_else_clause_optional','mini_pascal_parser.py',350),
  ('semicolon_optional -> SEMICOLON','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',354),
  ('semicolon_optional -> empty','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',355),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','mini_pascal_parser.py',359),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mini_pascal_parser.py',365),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mini_pascal_parser.py',366),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mini_pascal_parser.py',367),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mini_pascal_parser.py',368),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','mini_pascal_parser.py',369),
  ('expression -> expression MODULO expression','expression',3,'p_expression','mini_pascal_parser.py',370),
  ('expression -> expression SHL expression','expression',3,'p_expression','mini_pascal_parser.py',371),
  ('expression -> expression SHR expression','expression',3,'p_expression','mini_pascal_parser.py',372),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',373),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',374),
  ('expression -> expression LT expression','expression',3,'p_expression','mini_pascal_parser.py',375),
  ('expression -> expression GT expression','expression',3,'p_expression','mini_pascal_parser.py',376),
  ('expression -> expression LE expression','expression',3,'p_expression','mini_pascal_parser.py',377),
  ('expression -> expression GE expression','expression',3,'p_expression','mini_pascal_parser.py',378),
  ('expression -> expression AND expression','expression',3,'p_expression','mini_pascal_parser.py',379),
  ('expression -> expression OR expression','expression',3,'p_expression','mini_pascal_parser.py',380),
  ('expression -> expression XOR expression','expression',3,'p_expression','mini_pascal_parser.py',381),
  ('expression -> NOT expression','expression',2,'p_expression','mini_pascal_parser.py',382),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression','mini_pascal_parser.py',383),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','mini_pascal_parser.py',384),
  ('expression -> function_call','expression',1,'p_expression','mini_pascal_parser.py',385),
  ('expression -> variable','expression',1,'p_expression','mini_pascal_parser.py',386),
  ('expression -> INTEGER_CONST','expression',1,'p_expression','mini_pascal_parser.py',387),
  ('expression -> REAL_CONST','expression',1,'p_expression','mini_pascal_parser.py',388),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','mini_pascal_parser.py',389),
  ('function_call -> ID LPAREN args_optional RPAREN','function_call',4,'p_function_call','mini_pascal_parser.py',394),
  ('args_optional -> args','args_optional',1,'p_args_opt','mini_pascal_parser.py',399),
  ('args_optional -> empty','args_optional',1,'p_args_opt','mini_pascal_parser.py',400),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','mini_pascal_parser.py',405),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','mini_pascal_parser.py',406),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','mini_pascal_parser.py',407),
  ('constant -> constant_identifier','constant',1,'p_constant','mini_pascal_parser.py',408),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',412),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',413),
  ('sign -> PLUS','sign',1,'p_sign','mini_pascal_parser.py',417),
  ('sign -> MINUS','sign',1,'p_sign','mini_pascal_parser.py',418),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','mini_pascal_parser.py',422),
  ('empty -> <empty>','empty',0,'p_empty','mini_pascal_parser.py',427),
]
