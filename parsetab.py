
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORXORleftANDleftSHLSHRnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftLPARENRPARENrightNOTABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE CLASS COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON uses_clause_opt block DOTuses_clause_opt : uses_clause\n| emptyunit_list : unit_list COMMA ID\n| IDuses_clause : USES unit_list SEMICOLONblock : declarations compound_statementdeclarations : declaration_list\n| emptydeclaration_list : declaration_list declaration\n| declarationdeclaration : var_declaration\n| const_declaration\n| type_declaration\n| procedure_declaration\n| function_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n| var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n| IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n| const_definition SEMICOLONconst_definition : ID EQUAL constantformal_parameter_list_opt : LPAREN formal_parameter_list RPAREN\n| emptyformal_parameter_list : formal_parameter_list SEMICOLON formal_parameter\n| formal_parameterformal_parameter : id_list COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n| type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n| array_type\n| record_type\n| class_typeclass_type : CLASS class_body ENDclass_body : class_member_listclass_member_list : class_member_list class_member\n| class_memberclass_member : class_variable_declaration\n| constructor_declaration\n| class_function_declaration\n| class_procedure_declarationclass_variable_declaration : ID COLON type SEMICOLONconstructor_declaration : CONSTRUCTOR ID formal_parameter_list_opt SEMICOLONclass_function_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLONfunction_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLONprocedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLONclass_procedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLONsimple_type : subrange_type\n| type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n| field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n| predefined_typepredefined_type : INTEGER\n| REAL\n| BOOLEAN\n| STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement\n| statement_list SEMICOLON statementstatement : simple_statement\n| structured_statementsimple_statement : assignment_statement\n| procedure_call_statement\n| emptyassignment_statement : variable ASSIGN expressionvariable : IDexpression_list : expression\n| expression_list COMMA expressionprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args_optional RPARENargs : args COMMA expression\n| expressionstructured_statement : compound_statement\n| if_statement\n| while_statement\n| repeat_statement\n| for_statement\n| case_statement\n| record_assignmentif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n| emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n| FOR ID ASSIGN expression DOWNTO expression DO statementcase_statement : CASE expression OF case_element_list else_clause_optional ENDcase_element_list : case_element_list semicolon_optional case_element\n| case_elementcase_element : case_label_list COLON statementcase_label_list : case_label_list COMMA case_label\n| case_labelcase_label : constantelse_clause_optional : semicolon_optional ELSE statement semicolon_optional\n| emptysemicolon_optional : SEMICOLON\n| emptyrecord_assignment : ID DOT ID ASSIGN expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression DIVIDE_INT expression\n| expression MODULO expression\n| expression SHL expression\n| expression SHR expression\n| expression EQUAL expression\n| expression NEQUAL expression\n| expression LT expression\n| expression GT expression\n| expression LE expression\n| expression GE expression\n| expression AND expression\n| expression OR expression\n| expression XOR expressionexpression : NOT expression %prec NOTexpression : LPAREN expression RPARENexpression : function_callexpression : variableexpression : INTEGER_CONSTexpression : REAL_CONSTexpression : STRING_LITERALfunction_call : ID LPAREN args_optional RPARENargs_optional : args\n| emptyconstant : UNSIGNED_NUMBER\n| sign UNSIGNED_NUMBER\n| STRING_LITERAL\n| constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n| REAL_CONSTsign : PLUS\n| MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,19,20,21,22,23,28,30,31,34,37,43,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,71,73,74,76,80,81,82,84,85,86,87,88,89,90,91,95,96,106,107,124,127,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,165,166,167,169,173,174,175,176,177,178,180,181,182,183,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,214,215,216,217,225,226,228,229,238,239,240,241,242,243,244,247,248,249,250,251,253,260,263,264,265,266,268,269,270,271,272,274,275,279,280,283,],[3,25,33,36,39,40,41,64,33,-19,36,39,79,-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,91,91,64,94,91,-18,109,123,-25,125,-34,109,33,-70,64,91,91,91,-131,-132,-133,-134,-135,-79,160,91,33,179,-24,-33,109,-78,64,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-129,91,64,91,91,125,-20,109,33,179,-43,-44,-45,-46,-47,230,231,232,125,33,109,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,91,-83,91,-148,-102,-62,109,-42,109,-93,64,-95,-136,91,91,-111,125,-110,-109,64,125,-61,-94,-100,-101,64,-103,109,-48,-49,109,-53,64,64,-98,-99,-50,]),'SEMICOLON':([3,24,25,27,28,35,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,69,72,75,77,79,80,81,86,87,88,89,90,91,93,98,99,100,101,102,103,104,109,110,111,113,114,115,116,117,118,119,120,125,126,128,130,131,134,135,136,154,157,170,184,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,214,216,217,223,224,227,230,232,233,235,236,238,239,240,241,244,250,254,255,256,258,259,260,263,264,265,266,274,275,276,277,278,279,280,],[4,42,-5,-7,-148,70,73,-148,81,-71,-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,-148,124,127,129,-28,-4,-70,-148,-131,-132,-133,-134,-135,-79,81,166,-36,-37,-38,-39,-54,-55,-64,-65,-139,-141,-142,-66,-67,-68,-69,-143,-144,-147,-26,-35,187,-30,-72,-78,-148,-129,-148,225,-140,234,-27,237,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,-83,249,-102,-59,253,-40,-148,-148,-56,-29,-31,-93,-148,-95,-136,-111,-148,-63,269,270,272,273,-94,-100,-101,-148,-103,-148,-148,249,-57,283,-98,-99,]),'USES':([4,],[8,]),'VAR':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,124,127,129,166,234,237,273,],[-148,19,-2,-3,19,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,19,-20,-52,19,-51,]),'CONST':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,124,127,129,166,234,237,273,],[-148,20,-2,-3,20,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,20,-20,-52,20,-51,]),'TYPE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,124,127,129,166,234,237,273,],[-148,21,-2,-3,21,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,21,-20,-52,21,-51,]),'PROCEDURE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,107,124,127,129,166,173,174,175,176,177,178,228,234,237,269,270,272,273,283,],[-148,22,-2,-3,22,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,182,-24,-33,22,-20,182,-43,-44,-45,-46,-47,-42,-52,22,-48,-49,-53,-51,-50,]),'FUNCTION':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,107,124,127,129,166,173,174,175,176,177,178,228,234,237,269,270,272,273,283,],[-148,23,-2,-3,23,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,181,-24,-33,23,-20,181,-43,-44,-45,-46,-47,-42,-52,23,-48,-49,-53,-51,-50,]),'BEGIN':([4,5,6,7,10,11,12,13,14,15,16,17,18,28,29,30,31,34,37,42,62,66,70,73,81,124,127,129,136,157,166,234,237,239,250,265,273,274,275,],[-148,-148,-2,-3,28,-8,-9,-11,-12,-13,-14,-15,-16,28,-10,-17,-19,-23,-32,-6,28,-18,-25,-34,28,-24,-33,-148,28,28,-20,-52,-148,28,28,28,-51,28,28,]),'DOT':([9,27,64,80,],[26,-7,95,-70,]),'COMMA':([24,25,32,33,79,86,87,88,89,90,91,111,113,114,119,120,123,125,132,154,162,164,171,184,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,218,219,220,241,245,267,],[43,-5,68,-22,-4,-131,-132,-133,-134,-135,-79,-139,-141,-142,-143,-144,-21,-147,68,-129,215,-85,68,-140,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,251,-105,-106,-136,-84,-104,]),'END':([28,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,80,81,86,87,88,89,90,91,134,135,136,154,157,168,169,172,173,174,175,176,177,178,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,214,216,217,225,228,238,239,240,241,244,246,248,249,250,253,260,263,264,265,266,269,270,272,274,275,276,279,280,281,282,283,],[-148,80,-71,-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,-70,-148,-131,-132,-133,-134,-135,-79,-72,-78,-148,-129,-148,223,-60,227,-41,-43,-44,-45,-46,-47,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,-83,-148,-102,-62,-42,-93,-148,-95,-136,-111,263,-108,-109,-148,-61,-94,-100,-101,-148,-103,-48,-49,-53,-148,-148,-148,-98,-99,-107,-110,-50,]),'IF':([28,62,81,136,157,239,250,265,274,275,],[60,60,60,60,60,60,60,60,60,60,]),'WHILE':([28,62,81,136,157,239,250,265,274,275,],[61,61,61,61,61,61,61,61,61,61,]),'REPEAT':([28,62,81,136,157,239,250,265,274,275,],[62,62,62,62,62,62,62,62,62,62,]),'FOR':([28,62,81,136,157,239,250,265,274,275,],[63,63,63,63,63,63,63,63,63,63,]),'CASE':([28,62,81,136,157,239,250,265,274,275,],[65,65,65,65,65,65,65,65,65,65,]),'COLON':([32,33,41,77,78,111,113,114,119,120,123,125,132,171,179,184,186,218,219,220,231,257,267,],[67,-22,-148,-28,133,-139,-141,-142,-143,-144,-21,-147,188,226,229,-140,-27,250,-105,-106,-148,271,-104,]),'EQUAL':([36,39,83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[71,74,145,-131,-132,-133,-134,-135,-79,145,145,145,-129,145,145,-112,-113,-114,-115,-116,-117,145,145,None,None,None,None,None,None,145,145,145,-130,145,145,-136,145,145,145,145,]),'LPAREN':([40,41,60,61,64,65,82,84,85,91,96,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,158,159,213,215,230,231,232,242,243,],[76,76,85,85,96,85,85,85,85,156,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,76,76,76,85,85,]),'UNTIL':([45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,80,81,86,87,88,89,90,91,93,134,135,136,154,157,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,214,238,239,240,241,244,260,263,274,275,279,280,],[-71,-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,-148,-70,-148,-131,-132,-133,-134,-135,-79,158,-72,-78,-148,-129,-148,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,-83,-93,-148,-95,-136,-111,-94,-100,-148,-148,-98,-99,]),'ELSE':([46,47,48,49,50,51,52,53,54,55,56,57,59,80,86,87,88,89,90,91,135,136,154,157,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,214,216,217,238,239,240,241,244,247,248,249,250,260,263,264,266,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,-70,-131,-132,-133,-134,-135,-79,-78,-148,-129,-148,239,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,-83,-148,-102,-93,-148,-95,-136,-111,265,-110,-109,-148,-94,-100,-101,-103,-148,-148,-98,-99,]),'STRING_LITERAL':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,85,86,87,88,89,90,91,96,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,165,167,183,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,214,215,216,217,226,229,238,239,240,241,242,243,244,247,248,249,250,251,260,263,264,266,268,271,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,90,90,90,113,113,113,-70,90,90,90,-131,-132,-133,-134,-135,-79,90,113,-78,-148,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-129,90,-148,90,90,113,113,113,113,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,90,-83,90,-148,-102,113,113,-93,-148,-95,-136,90,90,-111,113,-110,-109,-148,113,-94,-100,-101,-103,113,113,-148,-148,-98,-99,]),'INTEGER_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,85,86,87,88,89,90,91,96,112,121,122,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,165,167,183,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,214,215,216,217,226,229,238,239,240,241,242,243,244,247,248,249,250,251,260,263,264,266,268,271,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,88,88,88,119,119,119,-70,88,88,88,-131,-132,-133,-134,-135,-79,88,119,-145,-146,119,-78,-148,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-129,88,-148,88,88,119,119,119,119,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,88,-83,88,-148,-102,119,119,-93,-148,-95,-136,88,88,-111,119,-110,-109,-148,119,-94,-100,-101,-103,119,119,-148,-148,-98,-99,]),'REAL_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,85,86,87,88,89,90,91,96,112,121,122,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,157,158,159,165,167,183,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,214,215,216,217,226,229,238,239,240,241,242,243,244,247,248,249,250,251,260,263,264,266,268,271,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,89,89,89,120,120,120,-70,89,89,89,-131,-132,-133,-134,-135,-79,89,120,-145,-146,120,-78,-148,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-129,89,-148,89,89,120,120,120,120,-148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-96,-97,89,-83,89,-148,-102,120,120,-93,-148,-95,-136,89,89,-111,120,-110,-109,-148,120,-94,-100,-101,-103,120,120,-148,-148,-98,-99,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,83,86,87,88,89,90,91,92,97,133,135,136,154,155,157,164,165,167,183,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,214,216,217,226,229,238,239,240,241,244,245,247,248,249,250,251,260,261,262,263,264,266,268,271,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,121,121,121,-70,137,-131,-132,-133,-134,-135,-79,137,137,121,137,-148,-129,137,-148,137,121,121,121,121,-148,-112,-113,-114,-115,-116,-117,137,137,137,137,137,137,137,137,137,137,137,-130,-96,137,137,-83,-148,-102,121,121,-93,-148,-95,-136,137,137,121,-110,-109,-148,121,-94,137,137,-100,-101,-103,121,121,-148,-148,-98,-99,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,83,86,87,88,89,90,91,92,97,133,135,136,154,155,157,164,165,167,183,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,212,214,216,217,226,229,238,239,240,241,244,245,247,248,249,250,251,260,261,262,263,264,266,268,271,274,275,279,280,],[-73,-74,-75,-76,-77,-86,-87,-88,-89,-90,-91,-92,-82,122,122,122,-70,138,-131,-132,-133,-134,-135,-79,138,138,122,138,-148,-129,138,-148,138,122,122,122,122,-148,-112,-113,-114,-115,-116,-117,138,138,138,138,138,138,138,138,138,138,138,-130,-96,138,138,-83,-148,-102,122,122,-93,-148,-95,-136,138,138,122,-110,-109,-148,122,-94,138,138,-100,-101,-103,122,122,-148,-148,-98,-99,]),'ASSIGN':([58,64,94,160,],[82,-79,159,213,]),'NOT':([60,61,65,82,84,85,96,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,158,159,213,215,242,243,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'ARRAY':([67,74,133,188,226,229,268,271,],[105,105,105,105,105,105,105,105,]),'RECORD':([67,74,133,188,226,229,268,271,],[106,106,106,106,106,106,106,106,]),'CLASS':([67,74,133,188,226,229,268,271,],[107,107,107,107,107,107,107,107,]),'INTEGER':([67,74,133,167,188,226,229,268,271,],[115,115,115,115,115,115,115,115,115,]),'REAL':([67,74,133,167,188,226,229,268,271,],[116,116,116,116,116,116,116,116,116,]),'BOOLEAN':([67,74,133,167,188,226,229,268,271,],[117,117,117,117,117,117,117,117,117,]),'STRING':([67,74,133,167,188,226,229,268,271,],[118,118,118,118,118,118,118,118,118,]),'THEN':([83,86,87,88,89,90,91,154,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,241,],[136,-131,-132,-133,-134,-135,-79,-129,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-136,]),'TIMES':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[139,-131,-132,-133,-134,-135,-79,139,139,139,-129,139,139,139,139,-114,-115,-116,-117,139,139,139,139,139,139,139,139,139,139,139,-130,139,139,-136,139,139,139,139,]),'DIVIDE':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[140,-131,-132,-133,-134,-135,-79,140,140,140,-129,140,140,140,140,-114,-115,-116,-117,140,140,140,140,140,140,140,140,140,140,140,-130,140,140,-136,140,140,140,140,]),'DIVIDE_INT':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[141,-131,-132,-133,-134,-135,-79,141,141,141,-129,141,141,141,141,-114,-115,-116,-117,141,141,141,141,141,141,141,141,141,141,141,-130,141,141,-136,141,141,141,141,]),'MODULO':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[142,-131,-132,-133,-134,-135,-79,142,142,142,-129,142,142,142,142,-114,-115,-116,-117,142,142,142,142,142,142,142,142,142,142,142,-130,142,142,-136,142,142,142,142,]),'SHL':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[143,-131,-132,-133,-134,-135,-79,143,143,143,-129,143,143,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,143,143,143,-130,143,143,-136,143,143,143,143,]),'SHR':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[144,-131,-132,-133,-134,-135,-79,144,144,144,-129,144,144,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,144,144,144,-130,144,144,-136,144,144,144,144,]),'NEQUAL':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[146,-131,-132,-133,-134,-135,-79,146,146,146,-129,146,146,-112,-113,-114,-115,-116,-117,146,146,None,None,None,None,None,None,146,146,146,-130,146,146,-136,146,146,146,146,]),'LT':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[147,-131,-132,-133,-134,-135,-79,147,147,147,-129,147,147,-112,-113,-114,-115,-116,-117,147,147,None,None,None,None,None,None,147,147,147,-130,147,147,-136,147,147,147,147,]),'GT':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[148,-131,-132,-133,-134,-135,-79,148,148,148,-129,148,148,-112,-113,-114,-115,-116,-117,148,148,None,None,None,None,None,None,148,148,148,-130,148,148,-136,148,148,148,148,]),'LE':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[149,-131,-132,-133,-134,-135,-79,149,149,149,-129,149,149,-112,-113,-114,-115,-116,-117,149,149,None,None,None,None,None,None,149,149,149,-130,149,149,-136,149,149,149,149,]),'GE':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[150,-131,-132,-133,-134,-135,-79,150,150,150,-129,150,150,-112,-113,-114,-115,-116,-117,150,150,None,None,None,None,None,None,150,150,150,-130,150,150,-136,150,150,150,150,]),'AND':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[151,-131,-132,-133,-134,-135,-79,151,151,151,-129,151,151,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,151,151,-130,151,151,-136,151,151,151,151,]),'OR':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[152,-131,-132,-133,-134,-135,-79,152,152,152,-129,152,152,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,152,152,-136,152,152,152,152,]),'XOR':([83,86,87,88,89,90,91,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,241,244,245,261,262,],[153,-131,-132,-133,-134,-135,-79,153,153,153,-129,153,153,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,153,153,-136,153,153,153,153,]),'DO':([86,87,88,89,90,91,92,154,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,241,261,262,],[-131,-132,-133,-134,-135,-79,157,-129,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-136,274,275,]),'OF':([86,87,88,89,90,91,97,154,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,241,252,],[-131,-132,-133,-134,-135,-79,165,-129,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,-136,268,]),'RPAREN':([86,87,88,89,90,91,96,99,100,101,102,103,104,109,110,111,113,114,115,116,117,118,119,120,125,130,131,154,155,156,161,162,163,164,184,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,223,227,233,235,236,241,245,277,],[-131,-132,-133,-134,-135,-79,-148,-36,-37,-38,-39,-54,-55,-64,-65,-139,-141,-142,-66,-67,-68,-69,-143,-144,-147,186,-30,-129,208,-148,214,-137,-138,-85,-140,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,241,-59,-40,-56,-29,-31,-136,-84,-57,]),'TO':([86,87,88,89,90,91,154,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,212,241,],[-131,-132,-133,-134,-135,-79,-129,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,242,-136,]),'DOWNTO':([86,87,88,89,90,91,154,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,212,241,],[-131,-132,-133,-134,-135,-79,-129,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-130,243,-136,]),'RBRACKET':([103,104,109,110,111,113,114,115,116,117,118,119,120,125,184,221,222,233,],[-54,-55,-64,-65,-139,-141,-142,-66,-67,-68,-69,-143,-144,-147,-140,252,-58,-56,]),'LBRACKET':([105,],[167,]),'CONSTRUCTOR':([107,173,174,175,176,177,178,228,269,270,272,283,],[180,180,-43,-44,-45,-46,-47,-42,-48,-49,-53,-50,]),'DOTDOT':([108,109,111,113,114,119,120,184,],[183,-147,-139,-141,-142,-143,-144,-140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_clause_opt':([4,],[5,]),'uses_clause':([4,],[6,]),'empty':([4,5,28,40,41,62,81,96,129,136,156,157,190,216,230,231,232,237,239,250,265,274,275,276,],[7,12,50,77,77,50,50,163,12,50,163,50,240,248,77,77,77,12,50,50,50,50,50,282,]),'block':([5,129,237,],[9,185,259,]),'declarations':([5,129,237,],[10,10,10,]),'declaration_list':([5,129,237,],[11,11,11,]),'declaration':([5,11,129,237,],[13,29,13,13,]),'var_declaration':([5,11,129,237,],[14,14,14,14,]),'const_declaration':([5,11,129,237,],[15,15,15,15,]),'type_declaration':([5,11,129,237,],[16,16,16,16,]),'procedure_declaration':([5,11,129,237,],[17,17,17,17,]),'function_declaration':([5,11,129,237,],[18,18,18,18,]),'unit_list':([8,],[24,]),'compound_statement':([10,28,62,81,136,157,239,250,265,274,275,],[27,51,51,51,51,51,51,51,51,51,51,]),'var_declaration_list':([19,],[30,]),'var_decl':([19,30,],[31,66,]),'id_list':([19,30,76,106,169,187,],[32,32,132,171,171,132,]),'const_list':([20,],[34,]),'const_definition':([20,34,],[35,69,]),'type_list':([21,],[37,]),'type_definition':([21,37,],[38,72,]),'statement_list':([28,62,],[44,93,]),'statement':([28,62,81,136,157,239,250,265,274,275,],[45,45,134,190,210,260,266,276,279,280,]),'simple_statement':([28,62,81,136,157,239,250,265,274,275,],[46,46,46,46,46,46,46,46,46,46,]),'structured_statement':([28,62,81,136,157,239,250,265,274,275,],[47,47,47,47,47,47,47,47,47,47,]),'assignment_statement':([28,62,81,136,157,239,250,265,274,275,],[48,48,48,48,48,48,48,48,48,48,]),'procedure_call_statement':([28,62,81,136,157,239,250,265,274,275,],[49,49,49,49,49,49,49,49,49,49,]),'if_statement':([28,62,81,136,157,239,250,265,274,275,],[52,52,52,52,52,52,52,52,52,52,]),'while_statement':([28,62,81,136,157,239,250,265,274,275,],[53,53,53,53,53,53,53,53,53,53,]),'repeat_statement':([28,62,81,136,157,239,250,265,274,275,],[54,54,54,54,54,54,54,54,54,54,]),'for_statement':([28,62,81,136,157,239,250,265,274,275,],[55,55,55,55,55,55,55,55,55,55,]),'case_statement':([28,62,81,136,157,239,250,265,274,275,],[56,56,56,56,56,56,56,56,56,56,]),'record_assignment':([28,62,81,136,157,239,250,265,274,275,],[57,57,57,57,57,57,57,57,57,57,]),'variable':([28,60,61,62,65,81,82,84,85,96,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,157,158,159,213,215,239,242,243,250,265,274,275,],[58,87,87,58,87,58,87,87,87,87,58,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,58,87,87,87,87,58,87,87,58,58,58,58,]),'procedure_call':([28,62,81,136,157,239,250,265,274,275,],[59,59,59,59,59,59,59,59,59,59,]),'formal_parameter_list_opt':([40,41,230,231,232,],[75,78,256,257,258,]),'expression':([60,61,65,82,84,85,96,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,158,159,213,215,242,243,],[83,92,97,135,154,155,164,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,164,211,212,244,245,261,262,]),'function_call':([60,61,65,82,84,85,96,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,158,159,213,215,242,243,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'type':([67,74,133,188,226,229,268,271,],[98,128,189,236,254,255,277,278,]),'simple_type':([67,74,133,167,188,226,229,268,271,],[99,99,99,222,99,99,99,99,99,]),'array_type':([67,74,133,188,226,229,268,271,],[100,100,100,100,100,100,100,100,]),'record_type':([67,74,133,188,226,229,268,271,],[101,101,101,101,101,101,101,101,]),'class_type':([67,74,133,188,226,229,268,271,],[102,102,102,102,102,102,102,102,]),'subrange_type':([67,74,133,167,188,226,229,268,271,],[103,103,103,103,103,103,103,103,103,]),'type_identifier':([67,74,133,167,188,226,229,268,271,],[104,104,104,104,104,104,104,104,104,]),'constant':([67,71,74,133,165,167,183,188,226,229,247,251,268,271,],[108,126,108,108,220,108,233,108,108,108,220,220,108,108,]),'predefined_type':([67,74,133,167,188,226,229,268,271,],[110,110,110,110,110,110,110,110,110,]),'UNSIGNED_NUMBER':([67,71,74,112,133,165,167,183,188,226,229,247,251,268,271,],[111,111,111,184,111,111,111,111,111,111,111,111,111,111,111,]),'sign':([67,71,74,133,165,167,183,188,226,229,247,251,268,271,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'constant_identifier':([67,71,74,133,165,167,183,188,226,229,247,251,268,271,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'formal_parameter_list':([76,],[130,]),'formal_parameter':([76,187,],[131,235,]),'args_optional':([96,156,],[161,209,]),'args':([96,156,],[162,162,]),'record_fields':([106,],[168,]),'field_list':([106,],[169,]),'field_declaration':([106,169,],[170,224,]),'class_body':([107,],[172,]),'class_member_list':([107,],[173,]),'class_member':([107,173,],[174,228,]),'class_variable_declaration':([107,173,],[175,175,]),'constructor_declaration':([107,173,],[176,176,]),'class_function_declaration':([107,173,],[177,177,]),'class_procedure_declaration':([107,173,],[178,178,]),'case_element_list':([165,],[216,]),'case_element':([165,247,],[217,264,]),'case_label_list':([165,247,],[218,218,]),'case_label':([165,247,251,],[219,219,267,]),'index_type':([167,],[221,]),'else_part':([190,],[238,]),'else_clause_optional':([216,],[246,]),'semicolon_optional':([216,276,],[247,281,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT','program',6,'p_program','mini_pascal_parser.py',73),
  ('uses_clause_opt -> uses_clause','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',77),
  ('uses_clause_opt -> empty','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',78),
  ('unit_list -> unit_list COMMA ID','unit_list',3,'p_unit_list','mini_pascal_parser.py',83),
  ('unit_list -> ID','unit_list',1,'p_unit_list','mini_pascal_parser.py',84),
  ('uses_clause -> USES unit_list SEMICOLON','uses_clause',3,'p_uses_clause','mini_pascal_parser.py',88),
  ('block -> declarations compound_statement','block',2,'p_block','mini_pascal_parser.py',93),
  ('declarations -> declaration_list','declarations',1,'p_declarations','mini_pascal_parser.py',98),
  ('declarations -> empty','declarations',1,'p_declarations','mini_pascal_parser.py',99),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','mini_pascal_parser.py',103),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','mini_pascal_parser.py',104),
  ('declaration -> var_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',108),
  ('declaration -> const_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',109),
  ('declaration -> type_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',110),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',111),
  ('declaration -> function_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',112),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','mini_pascal_parser.py',116),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','mini_pascal_parser.py',120),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','mini_pascal_parser.py',121),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','mini_pascal_parser.py',125),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','mini_pascal_parser.py',132),
  ('id_list -> ID','id_list',1,'p_id_list','mini_pascal_parser.py',133),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','mini_pascal_parser.py',140),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','mini_pascal_parser.py',144),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','mini_pascal_parser.py',145),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','mini_pascal_parser.py',149),
  ('formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN','formal_parameter_list_opt',3,'p_formal_parameter_list_opt','mini_pascal_parser.py',161),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_parameter_list_opt','mini_pascal_parser.py',162),
  ('formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','mini_pascal_parser.py',166),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','mini_pascal_parser.py',167),
  ('formal_parameter -> id_list COLON type','formal_parameter',3,'p_formal_parameter','mini_pascal_parser.py',171),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','mini_pascal_parser.py',176),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','mini_pascal_parser.py',180),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','mini_pascal_parser.py',181),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','mini_pascal_parser.py',185),
  ('type -> simple_type','type',1,'p_type','mini_pascal_parser.py',190),
  ('type -> array_type','type',1,'p_type','mini_pascal_parser.py',191),
  ('type -> record_type','type',1,'p_type','mini_pascal_parser.py',192),
  ('type -> class_type','type',1,'p_type','mini_pascal_parser.py',193),
  ('class_type -> CLASS class_body END','class_type',3,'p_class_type','mini_pascal_parser.py',197),
  ('class_body -> class_member_list','class_body',1,'p_class_body','mini_pascal_parser.py',201),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','mini_pascal_parser.py',205),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','mini_pascal_parser.py',206),
  ('class_member -> class_variable_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',209),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',210),
  ('class_member -> class_function_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',211),
  ('class_member -> class_procedure_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',212),
  ('class_variable_declaration -> ID COLON type SEMICOLON','class_variable_declaration',4,'p_class_variable_declaration','mini_pascal_parser.py',216),
  ('constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON','constructor_declaration',4,'p_constructor_declaration','mini_pascal_parser.py',220),
  ('class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON','class_function_declaration',6,'p_class_function_declaration','mini_pascal_parser.py',223),
  ('function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','mini_pascal_parser.py',226),
  ('procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON','procedure_declaration',6,'p_procedure_declaration','mini_pascal_parser.py',230),
  ('class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON','class_procedure_declaration',4,'p_class_procedure_declaration','mini_pascal_parser.py',235),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','mini_pascal_parser.py',240),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','mini_pascal_parser.py',241),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','mini_pascal_parser.py',245),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','mini_pascal_parser.py',249),
  ('index_type -> simple_type','index_type',1,'p_index_type','mini_pascal_parser.py',253),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','mini_pascal_parser.py',257),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','mini_pascal_parser.py',261),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','mini_pascal_parser.py',265),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','mini_pascal_parser.py',266),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','mini_pascal_parser.py',270),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',274),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',275),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',279),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',280),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',281),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',282),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','mini_pascal_parser.py',287),
  ('statement_list -> statement','statement_list',1,'p_statement_list','mini_pascal_parser.py',291),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','mini_pascal_parser.py',292),
  ('statement -> simple_statement','statement',1,'p_statement','mini_pascal_parser.py',299),
  ('statement -> structured_statement','statement',1,'p_statement','mini_pascal_parser.py',300),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',304),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',305),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',306),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','mini_pascal_parser.py',310),
  ('variable -> ID','variable',1,'p_variable','mini_pascal_parser.py',314),
  ('expression_list -> expression','expression_list',1,'p_expression_list','mini_pascal_parser.py',323),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','mini_pascal_parser.py',324),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','mini_pascal_parser.py',331),
  ('procedure_call -> ID LPAREN args_optional RPAREN','procedure_call',4,'p_procedure_call','mini_pascal_parser.py',335),
  ('args -> args COMMA expression','args',3,'p_args','mini_pascal_parser.py',339),
  ('args -> expression','args',1,'p_args','mini_pascal_parser.py',340),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',347),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',348),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',349),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',350),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',351),
  ('structured_statement -> case_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',352),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',353),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','mini_pascal_parser.py',357),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','mini_pascal_parser.py',361),
  ('else_part -> empty','else_part',1,'p_else_part','mini_pascal_parser.py',362),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','mini_pascal_parser.py',369),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','mini_pascal_parser.py',373),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',377),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',378),
  ('case_statement -> CASE expression OF case_element_list else_clause_optional END','case_statement',6,'p_case_statement','mini_pascal_parser.py',383),
  ('case_element_list -> case_element_list semicolon_optional case_element','case_element_list',3,'p_case_element_list','mini_pascal_parser.py',387),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list','mini_pascal_parser.py',388),
  ('case_element -> case_label_list COLON statement','case_element',3,'p_case_element','mini_pascal_parser.py',395),
  ('case_label_list -> case_label_list COMMA case_label','case_label_list',3,'p_case_label_list','mini_pascal_parser.py',399),
  ('case_label_list -> case_label','case_label_list',1,'p_case_label_list','mini_pascal_parser.py',400),
  ('case_label -> constant','case_label',1,'p_case_label','mini_pascal_parser.py',407),
  ('else_clause_optional -> semicolon_optional ELSE statement semicolon_optional','else_clause_optional',4,'p_else_clause_optional','mini_pascal_parser.py',411),
  ('else_clause_optional -> empty','else_clause_optional',1,'p_else_clause_optional','mini_pascal_parser.py',412),
  ('semicolon_optional -> SEMICOLON','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',419),
  ('semicolon_optional -> empty','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',420),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','mini_pascal_parser.py',424),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mini_pascal_parser.py',430),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mini_pascal_parser.py',431),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mini_pascal_parser.py',432),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mini_pascal_parser.py',433),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','mini_pascal_parser.py',434),
  ('expression -> expression MODULO expression','expression',3,'p_expression','mini_pascal_parser.py',435),
  ('expression -> expression SHL expression','expression',3,'p_expression','mini_pascal_parser.py',436),
  ('expression -> expression SHR expression','expression',3,'p_expression','mini_pascal_parser.py',437),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',438),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',439),
  ('expression -> expression LT expression','expression',3,'p_expression','mini_pascal_parser.py',440),
  ('expression -> expression GT expression','expression',3,'p_expression','mini_pascal_parser.py',441),
  ('expression -> expression LE expression','expression',3,'p_expression','mini_pascal_parser.py',442),
  ('expression -> expression GE expression','expression',3,'p_expression','mini_pascal_parser.py',443),
  ('expression -> expression AND expression','expression',3,'p_expression','mini_pascal_parser.py',444),
  ('expression -> expression OR expression','expression',3,'p_expression','mini_pascal_parser.py',445),
  ('expression -> expression XOR expression','expression',3,'p_expression','mini_pascal_parser.py',446),
  ('expression -> NOT expression','expression',2,'p_expression_not','mini_pascal_parser.py',450),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','mini_pascal_parser.py',454),
  ('expression -> function_call','expression',1,'p_expression_function_call','mini_pascal_parser.py',458),
  ('expression -> variable','expression',1,'p_expression_variable','mini_pascal_parser.py',462),
  ('expression -> INTEGER_CONST','expression',1,'p_expression_integer','mini_pascal_parser.py',466),
  ('expression -> REAL_CONST','expression',1,'p_expression_real','mini_pascal_parser.py',470),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_string','mini_pascal_parser.py',474),
  ('function_call -> ID LPAREN args_optional RPAREN','function_call',4,'p_function_call','mini_pascal_parser.py',478),
  ('args_optional -> args','args_optional',1,'p_args_optional','mini_pascal_parser.py',483),
  ('args_optional -> empty','args_optional',1,'p_args_optional','mini_pascal_parser.py',484),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','mini_pascal_parser.py',489),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','mini_pascal_parser.py',490),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','mini_pascal_parser.py',491),
  ('constant -> constant_identifier','constant',1,'p_constant','mini_pascal_parser.py',492),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',496),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',497),
  ('sign -> PLUS','sign',1,'p_sign','mini_pascal_parser.py',501),
  ('sign -> MINUS','sign',1,'p_sign','mini_pascal_parser.py',502),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','mini_pascal_parser.py',506),
  ('empty -> <empty>','empty',0,'p_empty','mini_pascal_parser.py',511),
]
