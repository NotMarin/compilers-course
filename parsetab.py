
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftORXORleftANDleftSHLSHRnonassocEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVIDE_INTMODULOleftLPARENRPARENrightNOTrightEXPONENTABSOLUTE AND ARRAY ASM ASSIGN BEGIN BOOLEAN CASE CLASS COLON COMMA CONST CONSTRUCTOR DESTRUCTOR DIVIDE DIVIDE_INT DO DOT DOTDOT DOWNTO ELSE END EQUAL EXPONENT EXTERNAL FILE FOR FORWARD FUNCTION FUNCTION GE GOTO GT ID IF IMPLEMENTATION IN INLINE INTEGER INTEGER_CONST INTERFACE INTERRUPT LABEL LBRACKET LE LPAREN LT MINUS MODULO NEQUAL NIL NOT OBJECT OF OFF OR PACKED PLUS PRIVATE PROCEDURE PROCEDURE PROGRAM RBRACKET REAL REAL_CONST RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING STRING_LITERAL THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH XORprogram : PROGRAM ID SEMICOLON uses_clause_opt block DOTuses_clause_opt : uses_clause\n                       | emptyunit_list : unit_list COMMA ID\n                 | IDuses_clause : USES unit_list SEMICOLONblock : declarations compound_statementdeclarations : declaration_list\n                    | emptydeclaration_list : declaration_list declaration\n                        | declarationdeclaration : var_declaration\n                   | const_declaration\n                   | type_declaration\n                   | procedure_declaration\n                   | function_declarationvar_declaration : VAR var_declaration_listvar_declaration_list : var_declaration_list var_decl\n                | var_declvar_decl : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n               | IDconst_declaration : CONST const_listconst_list : const_list const_definition SEMICOLON\n                  | const_definition SEMICOLONconst_definition : ID EQUAL constantformal_parameter_list_opt : LPAREN formal_parameter_list RPAREN\n                             | emptyformal_parameter_list : formal_parameter_list SEMICOLON formal_parameter\n                             | formal_parameterformal_parameter : id_list COLON typetype_declaration : TYPE type_listtype_list : type_list type_definition SEMICOLON\n                 | type_definition SEMICOLONtype_definition : ID EQUAL typetype : simple_type\n            | array_type\n            | record_type\n            | class_type\n            | enumerated_typeclass_type : CLASS class_body ENDenumerated_type : LPAREN identifier_list RPARENidentifier_list : identifier_list COMMA ID\n                       | IDclass_body : class_member_listclass_member_list : class_member_list class_member\n                         | class_memberclass_member : class_variable_declaration\n                    | constructor_declaration\n                    | class_function_declaration\n                    | class_procedure_declarationclass_variable_declaration : ID COLON type SEMICOLONconstructor_declaration : CONSTRUCTOR ID formal_parameter_list_opt SEMICOLONclass_function_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLONfunction_declaration : FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLONprocedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLONclass_procedure_declaration : PROCEDURE ID formal_parameter_list_opt SEMICOLONsimple_type : subrange_type\n                   | type_identifiersubrange_type : constant DOTDOT constantarray_type : ARRAY LBRACKET index_type RBRACKET OF typeindex_type : simple_typerecord_type : RECORD record_fields ENDrecord_fields : field_listfield_list : field_list field_declaration SEMICOLON\n                  | field_declaration SEMICOLONfield_declaration : id_list COLON typetype_identifier : ID\n                       | predefined_typepredefined_type : INTEGER\n                       | REAL\n                       | BOOLEAN\n                       | STRINGcompound_statement : BEGIN statement_list ENDstatement_list : statement\n                      | statement_list SEMICOLON statementstatement : simple_statement\n                 | structured_statementsimple_statement : assignment_statement\n                        | procedure_call_statement\n                        | emptyassignment_statement : variable ASSIGN expressionvariable : ID\n                | variable DOT ID\n                | variable LBRACKET expression_list RBRACKETexpression_list : expression\n                       | expression_list COMMA expressionprocedure_call_statement : procedure_callprocedure_call : ID LPAREN args_optional RPARENargs : args COMMA expression\n            | expressionstructured_statement : compound_statement\n                            | if_statement\n                            | while_statement\n                            | repeat_statement\n                            | for_statement\n                            | case_statement\n                            | record_assignmentif_statement : IF expression THEN statement else_partelse_part : ELSE statement\n                 | emptywhile_statement : WHILE expression DO statementrepeat_statement : REPEAT statement_list UNTIL expressionfor_statement : FOR ID ASSIGN expression TO expression DO statement\n                     | FOR ID ASSIGN expression DOWNTO expression DO statementcase_statement : CASE expression OF case_element_list else_clause_optional ENDcase_element_list : case_element_list semicolon_optional case_element\n                         | case_elementcase_element : case_label_list COLON statementcase_label_list : case_label_list COMMA case_label\n                       | case_labelcase_label : constantelse_clause_optional : semicolon_optional ELSE statement semicolon_optional\n                            | emptysemicolon_optional : SEMICOLON\n                          | emptyrecord_assignment : ID DOT ID ASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DIVIDE_INT expression\n                  | expression MODULO expression\n                  | expression SHL expression\n                  | expression SHR expression\n                  | expression EQUAL expression\n                  | expression NEQUAL expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | NOT expression %prec NOT\n                  | expression EXPONENT expression \n                  | LPAREN expression RPAREN\n                  | function_call\n                  | variable\n                  | INTEGER_CONST\n                  | REAL_CONST\n                  | STRING_LITERALfunction_call : ID LPAREN args_optional RPARENargs_optional : args\n                     | emptyconstant : UNSIGNED_NUMBER\n                | sign UNSIGNED_NUMBER\n                | STRING_LITERAL\n                | constant_identifierUNSIGNED_NUMBER : INTEGER_CONST\n                       | REAL_CONSTsign : PLUS\n            | MINUSconstant_identifier : IDempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,19,20,21,22,23,28,30,31,34,37,43,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,65,66,67,68,70,71,73,74,76,80,81,82,83,84,86,87,88,89,90,91,92,93,97,98,109,110,111,128,131,137,139,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,173,174,175,177,181,182,183,184,185,186,188,189,190,193,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,226,227,228,229,230,238,239,241,242,247,254,255,256,257,258,259,260,263,264,265,266,267,269,277,280,281,282,283,285,286,287,288,289,291,292,296,297,300,],[3,25,33,36,39,40,41,64,33,-19,36,39,79,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,93,93,64,96,93,-18,113,127,-25,129,-34,113,33,-74,64,93,140,93,93,93,-138,-139,-140,-141,-142,-83,168,93,33,187,192,-24,-33,113,-82,-84,64,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-135,93,64,93,93,129,-20,113,33,187,-47,-48,-49,-50,-51,243,244,245,129,33,113,-85,93,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,93,-89,93,-155,-108,-66,113,-46,113,275,-99,64,-101,-143,93,93,-117,129,-116,-115,64,129,-65,-100,-106,-107,64,-109,113,-52,-53,113,-57,64,64,-104,-105,-54,]),'SEMICOLON':([3,24,25,27,28,35,38,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,69,72,75,77,79,80,81,88,89,90,91,92,93,95,100,101,102,103,104,105,106,107,113,114,115,117,118,119,120,121,122,123,124,129,130,132,134,135,138,139,140,143,162,165,178,194,195,196,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,227,229,230,236,237,240,243,245,246,248,250,251,254,255,256,257,260,266,270,271,272,274,276,277,280,281,282,283,291,292,293,294,295,296,297,],[4,42,-5,-7,-155,70,73,-155,81,-75,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-155,128,131,133,-28,-4,-74,-155,-138,-139,-140,-141,-142,-83,81,174,-36,-37,-38,-39,-40,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,-26,-35,197,-30,-76,-82,-84,-155,-135,-155,238,-147,249,-27,252,-85,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,265,-108,-63,269,-41,-155,-155,-42,-60,-29,-31,-99,-155,-101,-143,-117,-155,-67,286,287,289,290,-100,-106,-107,-155,-109,-155,-155,265,-61,300,-104,-105,]),'USES':([4,],[8,]),'VAR':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,128,131,133,174,249,252,290,],[-155,19,-2,-3,19,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,19,-20,-56,19,-55,]),'CONST':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,128,131,133,174,249,252,290,],[-155,20,-2,-3,20,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,20,-20,-56,20,-55,]),'TYPE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,128,131,133,174,249,252,290,],[-155,21,-2,-3,21,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,-24,-33,21,-20,-56,21,-55,]),'PROCEDURE':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,110,128,131,133,174,181,182,183,184,185,186,241,249,252,286,287,289,290,300,],[-155,22,-2,-3,22,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,190,-24,-33,22,-20,190,-47,-48,-49,-50,-51,-46,-56,22,-52,-53,-57,-55,-54,]),'FUNCTION':([4,5,6,7,11,13,14,15,16,17,18,29,30,31,34,37,42,66,70,73,110,128,131,133,174,181,182,183,184,185,186,241,249,252,286,287,289,290,300,],[-155,23,-2,-3,23,-11,-12,-13,-14,-15,-16,-10,-17,-19,-23,-32,-6,-18,-25,-34,189,-24,-33,23,-20,189,-47,-48,-49,-50,-51,-46,-56,23,-52,-53,-57,-55,-54,]),'BEGIN':([4,5,6,7,10,11,12,13,14,15,16,17,18,28,29,30,31,34,37,42,62,66,70,73,81,128,131,133,143,165,174,249,252,255,266,282,290,291,292,],[-155,-155,-2,-3,28,-8,-9,-11,-12,-13,-14,-15,-16,28,-10,-17,-19,-23,-32,-6,28,-18,-25,-34,28,-24,-33,-155,28,28,-20,-56,-155,28,28,28,-55,28,28,]),'DOT':([9,27,58,64,80,89,93,140,200,],[26,-7,83,97,-74,83,-83,-84,-85,]),'COMMA':([24,25,32,33,79,88,89,90,91,92,93,115,117,118,123,124,127,129,136,140,141,142,162,170,172,179,191,192,194,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,231,232,233,253,257,261,275,284,],[43,-5,68,-22,-4,-138,-139,-140,-141,-142,-83,-146,-148,-149,-150,-151,-21,-154,68,-84,201,-86,-135,228,-91,68,247,-44,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,267,-111,-112,-87,-143,-90,-43,-110,]),'END':([28,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,80,81,88,89,90,91,92,93,138,139,140,143,162,165,176,177,180,181,182,183,184,185,186,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,227,229,230,238,241,254,255,256,257,260,262,264,265,266,269,277,280,281,282,283,286,287,289,291,292,293,296,297,298,299,300,],[-155,80,-75,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-74,-155,-138,-139,-140,-141,-142,-83,-76,-82,-84,-155,-135,-155,236,-64,240,-45,-47,-48,-49,-50,-51,-85,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,-155,-108,-66,-46,-99,-155,-101,-143,-117,280,-114,-115,-155,-65,-100,-106,-107,-155,-109,-52,-53,-57,-155,-155,-155,-104,-105,-113,-116,-54,]),'IF':([28,62,81,143,165,255,266,282,291,292,],[60,60,60,60,60,60,60,60,60,60,]),'WHILE':([28,62,81,143,165,255,266,282,291,292,],[61,61,61,61,61,61,61,61,61,61,]),'REPEAT':([28,62,81,143,165,255,266,282,291,292,],[62,62,62,62,62,62,62,62,62,62,]),'FOR':([28,62,81,143,165,255,266,282,291,292,],[63,63,63,63,63,63,63,63,63,63,]),'CASE':([28,62,81,143,165,255,266,282,291,292,],[65,65,65,65,65,65,65,65,65,65,]),'COLON':([32,33,41,77,78,115,117,118,123,124,127,129,136,179,187,194,196,231,232,233,244,273,284,],[67,-22,-155,-28,137,-146,-148,-149,-150,-151,-21,-154,198,239,242,-147,-27,266,-111,-112,-155,288,-110,]),'EQUAL':([36,39,85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[71,74,152,-138,-139,-140,-141,-142,-83,152,152,152,-84,152,-135,152,152,-85,-118,-119,-120,-121,-122,-123,152,152,None,None,None,None,None,None,152,152,152,-136,-137,152,152,152,-143,152,152,152,152,]),'LPAREN':([40,41,60,61,64,65,67,74,82,84,86,87,93,98,137,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,198,201,226,228,239,242,243,244,245,258,259,285,288,],[76,76,87,87,98,87,111,111,87,87,87,87,164,87,111,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,111,87,87,87,111,111,76,76,76,87,87,111,111,]),'UNTIL':([45,46,47,48,49,50,51,52,53,54,55,56,57,59,62,80,81,88,89,90,91,92,93,95,138,139,140,143,162,165,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,227,254,255,256,257,260,277,280,291,292,296,297,],[-75,-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-155,-74,-155,-138,-139,-140,-141,-142,-83,166,-76,-82,-84,-155,-135,-155,-85,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,-99,-155,-101,-143,-117,-100,-106,-155,-155,-104,-105,]),'ELSE':([46,47,48,49,50,51,52,53,54,55,56,57,59,80,88,89,90,91,92,93,139,140,143,162,165,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,227,229,230,254,255,256,257,260,263,264,265,266,277,280,281,283,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,-74,-138,-139,-140,-141,-142,-83,-82,-84,-155,-135,-155,-85,255,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,-89,-155,-108,-99,-155,-101,-143,-117,282,-116,-115,-155,-100,-106,-107,-109,-155,-155,-104,-105,]),'STRING_LITERAL':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,137,139,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,173,175,193,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,226,227,228,229,230,239,242,254,255,256,257,258,259,260,263,264,265,266,267,277,280,281,283,285,288,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,92,92,92,117,117,117,-74,92,92,92,92,-138,-139,-140,-141,-142,-83,92,117,-82,-84,-155,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-135,92,-155,92,92,117,117,117,117,-85,92,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,92,-89,92,-155,-108,117,117,-99,-155,-101,-143,92,92,-117,117,-116,-115,-155,117,-100,-106,-107,-109,117,117,-155,-155,-104,-105,]),'INTEGER_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,116,125,126,137,139,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,173,175,193,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,226,227,228,229,230,239,242,254,255,256,257,258,259,260,263,264,265,266,267,277,280,281,283,285,288,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,90,90,90,123,123,123,-74,90,90,90,90,-138,-139,-140,-141,-142,-83,90,123,-152,-153,123,-82,-84,-155,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-135,90,-155,90,90,123,123,123,123,-85,90,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,90,-89,90,-155,-108,123,123,-99,-155,-101,-143,90,90,-117,123,-116,-115,-155,123,-100,-106,-107,-109,123,123,-155,-155,-104,-105,]),'REAL_CONST':([46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,65,67,71,74,80,82,84,86,87,88,89,90,91,92,93,98,116,125,126,137,139,140,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,173,175,193,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,226,227,228,229,230,239,242,254,255,256,257,258,259,260,263,264,265,266,267,277,280,281,283,285,288,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,91,91,91,124,124,124,-74,91,91,91,91,-138,-139,-140,-141,-142,-83,91,124,-152,-153,124,-82,-84,-155,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-135,91,-155,91,91,124,124,124,124,-85,91,-155,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-102,-103,91,-89,91,-155,-108,124,124,-99,-155,-101,-143,91,91,-117,124,-116,-115,-155,124,-100,-106,-107,-109,124,124,-155,-155,-104,-105,]),'PLUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,137,139,140,142,143,162,163,165,172,173,175,193,198,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,225,227,229,230,239,242,253,254,255,256,257,260,261,263,264,265,266,267,277,278,279,280,281,283,285,288,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,125,125,125,-74,144,-138,-139,-140,-141,-142,-83,144,144,125,144,-84,144,-155,-135,144,-155,144,125,125,125,125,-85,-155,-118,-119,-120,-121,-122,-123,144,144,144,144,144,144,144,144,144,144,144,-136,-137,-102,144,144,-89,-155,-108,125,125,144,-99,-155,-101,-143,144,144,125,-116,-115,-155,125,-100,144,144,-106,-107,-109,125,125,-155,-155,-104,-105,]),'MINUS':([46,47,48,49,50,51,52,53,54,55,56,57,59,67,71,74,80,85,88,89,90,91,92,93,94,99,137,139,140,142,143,162,163,165,172,173,175,193,198,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,225,227,229,230,239,242,253,254,255,256,257,260,261,263,264,265,266,267,277,278,279,280,281,283,285,288,291,292,296,297,],[-77,-78,-79,-80,-81,-92,-93,-94,-95,-96,-97,-98,-88,126,126,126,-74,145,-138,-139,-140,-141,-142,-83,145,145,126,145,-84,145,-155,-135,145,-155,145,126,126,126,126,-85,-155,-118,-119,-120,-121,-122,-123,145,145,145,145,145,145,145,145,145,145,145,-136,-137,-102,145,145,-89,-155,-108,126,126,145,-99,-155,-101,-143,145,145,126,-116,-115,-155,126,-100,145,145,-106,-107,-109,126,126,-155,-155,-104,-105,]),'ASSIGN':([58,64,96,140,168,200,],[82,-83,167,-84,226,-85,]),'LBRACKET':([58,64,89,93,108,140,200,],[84,-83,84,-83,175,-84,-85,]),'NOT':([60,61,65,82,84,86,87,98,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,201,226,228,258,259,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'ARRAY':([67,74,137,198,239,242,285,288,],[108,108,108,108,108,108,108,108,]),'RECORD':([67,74,137,198,239,242,285,288,],[109,109,109,109,109,109,109,109,]),'CLASS':([67,74,137,198,239,242,285,288,],[110,110,110,110,110,110,110,110,]),'INTEGER':([67,74,137,175,198,239,242,285,288,],[119,119,119,119,119,119,119,119,119,]),'REAL':([67,74,137,175,198,239,242,285,288,],[120,120,120,120,120,120,120,120,120,]),'BOOLEAN':([67,74,137,175,198,239,242,285,288,],[121,121,121,121,121,121,121,121,121,]),'STRING':([67,74,137,175,198,239,242,285,288,],[122,122,122,122,122,122,122,122,122,]),'THEN':([85,88,89,90,91,92,93,140,162,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,257,],[143,-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,]),'TIMES':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[146,-138,-139,-140,-141,-142,-83,146,146,146,-84,146,-135,146,146,-85,146,146,-120,-121,-122,-123,146,146,146,146,146,146,146,146,146,146,146,-136,-137,146,146,146,-143,146,146,146,146,]),'DIVIDE':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[147,-138,-139,-140,-141,-142,-83,147,147,147,-84,147,-135,147,147,-85,147,147,-120,-121,-122,-123,147,147,147,147,147,147,147,147,147,147,147,-136,-137,147,147,147,-143,147,147,147,147,]),'DIVIDE_INT':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[148,-138,-139,-140,-141,-142,-83,148,148,148,-84,148,-135,148,148,-85,148,148,-120,-121,-122,-123,148,148,148,148,148,148,148,148,148,148,148,-136,-137,148,148,148,-143,148,148,148,148,]),'MODULO':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[149,-138,-139,-140,-141,-142,-83,149,149,149,-84,149,-135,149,149,-85,149,149,-120,-121,-122,-123,149,149,149,149,149,149,149,149,149,149,149,-136,-137,149,149,149,-143,149,149,149,149,]),'SHL':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[150,-138,-139,-140,-141,-142,-83,150,150,150,-84,150,-135,150,150,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,150,150,150,-136,-137,150,150,150,-143,150,150,150,150,]),'SHR':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[151,-138,-139,-140,-141,-142,-83,151,151,151,-84,151,-135,151,151,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,151,151,151,-136,-137,151,151,151,-143,151,151,151,151,]),'NEQUAL':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[153,-138,-139,-140,-141,-142,-83,153,153,153,-84,153,-135,153,153,-85,-118,-119,-120,-121,-122,-123,153,153,None,None,None,None,None,None,153,153,153,-136,-137,153,153,153,-143,153,153,153,153,]),'LT':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[154,-138,-139,-140,-141,-142,-83,154,154,154,-84,154,-135,154,154,-85,-118,-119,-120,-121,-122,-123,154,154,None,None,None,None,None,None,154,154,154,-136,-137,154,154,154,-143,154,154,154,154,]),'GT':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[155,-138,-139,-140,-141,-142,-83,155,155,155,-84,155,-135,155,155,-85,-118,-119,-120,-121,-122,-123,155,155,None,None,None,None,None,None,155,155,155,-136,-137,155,155,155,-143,155,155,155,155,]),'LE':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[156,-138,-139,-140,-141,-142,-83,156,156,156,-84,156,-135,156,156,-85,-118,-119,-120,-121,-122,-123,156,156,None,None,None,None,None,None,156,156,156,-136,-137,156,156,156,-143,156,156,156,156,]),'GE':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[157,-138,-139,-140,-141,-142,-83,157,157,157,-84,157,-135,157,157,-85,-118,-119,-120,-121,-122,-123,157,157,None,None,None,None,None,None,157,157,157,-136,-137,157,157,157,-143,157,157,157,157,]),'AND':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[158,-138,-139,-140,-141,-142,-83,158,158,158,-84,158,-135,158,158,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,158,158,-136,-137,158,158,158,-143,158,158,158,158,]),'OR':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[159,-138,-139,-140,-141,-142,-83,159,159,159,-84,159,-135,159,159,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,159,159,159,-143,159,159,159,159,]),'XOR':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[160,-138,-139,-140,-141,-142,-83,160,160,160,-84,160,-135,160,160,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,160,160,160,-143,160,160,160,160,]),'EXPONENT':([85,88,89,90,91,92,93,94,99,139,140,142,162,163,172,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,253,257,260,261,278,279,],[161,-138,-139,-140,-141,-142,-83,161,161,161,-84,161,161,161,161,-85,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,-137,161,161,161,-143,161,161,161,161,]),'DO':([88,89,90,91,92,93,94,140,162,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,257,278,279,],[-138,-139,-140,-141,-142,-83,165,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,291,292,]),'OF':([88,89,90,91,92,93,99,140,162,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,257,268,],[-138,-139,-140,-141,-142,-83,173,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,-143,285,]),'RBRACKET':([88,89,90,91,92,93,106,107,113,114,115,117,118,119,120,121,122,123,124,129,140,141,142,162,194,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,234,235,248,253,257,],[-138,-139,-140,-141,-142,-83,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,-84,200,-86,-135,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,268,-62,-60,-87,-143,]),'RPAREN':([88,89,90,91,92,93,98,101,102,103,104,105,106,107,113,114,115,117,118,119,120,121,122,123,124,129,134,135,140,162,163,164,169,170,171,172,191,192,194,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,236,240,246,248,250,251,257,261,275,294,],[-138,-139,-140,-141,-142,-83,-155,-36,-37,-38,-39,-40,-58,-59,-68,-69,-146,-148,-149,-70,-71,-72,-73,-150,-151,-154,196,-30,-84,-135,221,-155,227,-144,-145,-91,246,-44,-147,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,257,-63,-41,-42,-60,-29,-31,-143,-90,-43,-61,]),'TO':([88,89,90,91,92,93,140,162,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,225,257,],[-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,258,-143,]),'DOWNTO':([88,89,90,91,92,93,140,162,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,225,257,],[-138,-139,-140,-141,-142,-83,-84,-135,-85,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-137,259,-143,]),'CONSTRUCTOR':([110,181,182,183,184,185,186,241,286,287,289,300,],[188,188,-47,-48,-49,-50,-51,-46,-52,-53,-57,-54,]),'DOTDOT':([112,113,115,117,118,123,124,194,],[193,-154,-146,-148,-149,-150,-151,-147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'uses_clause_opt':([4,],[5,]),'uses_clause':([4,],[6,]),'empty':([4,5,28,40,41,62,81,98,133,143,164,165,202,229,243,244,245,252,255,266,282,291,292,293,],[7,12,50,77,77,50,50,171,12,50,171,50,256,264,77,77,77,12,50,50,50,50,50,299,]),'block':([5,133,252,],[9,195,276,]),'declarations':([5,133,252,],[10,10,10,]),'declaration_list':([5,133,252,],[11,11,11,]),'declaration':([5,11,133,252,],[13,29,13,13,]),'var_declaration':([5,11,133,252,],[14,14,14,14,]),'const_declaration':([5,11,133,252,],[15,15,15,15,]),'type_declaration':([5,11,133,252,],[16,16,16,16,]),'procedure_declaration':([5,11,133,252,],[17,17,17,17,]),'function_declaration':([5,11,133,252,],[18,18,18,18,]),'unit_list':([8,],[24,]),'compound_statement':([10,28,62,81,143,165,255,266,282,291,292,],[27,51,51,51,51,51,51,51,51,51,51,]),'var_declaration_list':([19,],[30,]),'var_decl':([19,30,],[31,66,]),'id_list':([19,30,76,109,177,197,],[32,32,136,179,179,136,]),'const_list':([20,],[34,]),'const_definition':([20,34,],[35,69,]),'type_list':([21,],[37,]),'type_definition':([21,37,],[38,72,]),'statement_list':([28,62,],[44,95,]),'statement':([28,62,81,143,165,255,266,282,291,292,],[45,45,138,202,223,277,283,293,296,297,]),'simple_statement':([28,62,81,143,165,255,266,282,291,292,],[46,46,46,46,46,46,46,46,46,46,]),'structured_statement':([28,62,81,143,165,255,266,282,291,292,],[47,47,47,47,47,47,47,47,47,47,]),'assignment_statement':([28,62,81,143,165,255,266,282,291,292,],[48,48,48,48,48,48,48,48,48,48,]),'procedure_call_statement':([28,62,81,143,165,255,266,282,291,292,],[49,49,49,49,49,49,49,49,49,49,]),'if_statement':([28,62,81,143,165,255,266,282,291,292,],[52,52,52,52,52,52,52,52,52,52,]),'while_statement':([28,62,81,143,165,255,266,282,291,292,],[53,53,53,53,53,53,53,53,53,53,]),'repeat_statement':([28,62,81,143,165,255,266,282,291,292,],[54,54,54,54,54,54,54,54,54,54,]),'for_statement':([28,62,81,143,165,255,266,282,291,292,],[55,55,55,55,55,55,55,55,55,55,]),'case_statement':([28,62,81,143,165,255,266,282,291,292,],[56,56,56,56,56,56,56,56,56,56,]),'record_assignment':([28,62,81,143,165,255,266,282,291,292,],[57,57,57,57,57,57,57,57,57,57,]),'variable':([28,60,61,62,65,81,82,84,86,87,98,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,165,166,167,201,226,228,255,258,259,266,282,291,292,],[58,89,89,58,89,58,89,89,89,89,89,58,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,58,89,89,89,89,89,58,89,89,58,58,58,58,]),'procedure_call':([28,62,81,143,165,255,266,282,291,292,],[59,59,59,59,59,59,59,59,59,59,]),'formal_parameter_list_opt':([40,41,243,244,245,],[75,78,272,273,274,]),'expression':([60,61,65,82,84,86,87,98,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,201,226,228,258,259,],[85,94,99,139,142,162,163,172,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,172,224,225,253,260,261,278,279,]),'function_call':([60,61,65,82,84,86,87,98,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,164,166,167,201,226,228,258,259,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'type':([67,74,137,198,239,242,285,288,],[100,132,199,251,270,271,294,295,]),'simple_type':([67,74,137,175,198,239,242,285,288,],[101,101,101,235,101,101,101,101,101,]),'array_type':([67,74,137,198,239,242,285,288,],[102,102,102,102,102,102,102,102,]),'record_type':([67,74,137,198,239,242,285,288,],[103,103,103,103,103,103,103,103,]),'class_type':([67,74,137,198,239,242,285,288,],[104,104,104,104,104,104,104,104,]),'enumerated_type':([67,74,137,198,239,242,285,288,],[105,105,105,105,105,105,105,105,]),'subrange_type':([67,74,137,175,198,239,242,285,288,],[106,106,106,106,106,106,106,106,106,]),'type_identifier':([67,74,137,175,198,239,242,285,288,],[107,107,107,107,107,107,107,107,107,]),'constant':([67,71,74,137,173,175,193,198,239,242,263,267,285,288,],[112,130,112,112,233,112,248,112,112,112,233,233,112,112,]),'predefined_type':([67,74,137,175,198,239,242,285,288,],[114,114,114,114,114,114,114,114,114,]),'UNSIGNED_NUMBER':([67,71,74,116,137,173,175,193,198,239,242,263,267,285,288,],[115,115,115,194,115,115,115,115,115,115,115,115,115,115,115,]),'sign':([67,71,74,137,173,175,193,198,239,242,263,267,285,288,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'constant_identifier':([67,71,74,137,173,175,193,198,239,242,263,267,285,288,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'formal_parameter_list':([76,],[134,]),'formal_parameter':([76,197,],[135,250,]),'expression_list':([84,],[141,]),'args_optional':([98,164,],[169,222,]),'args':([98,164,],[170,170,]),'record_fields':([109,],[176,]),'field_list':([109,],[177,]),'field_declaration':([109,177,],[178,237,]),'class_body':([110,],[180,]),'class_member_list':([110,],[181,]),'class_member':([110,181,],[182,241,]),'class_variable_declaration':([110,181,],[183,183,]),'constructor_declaration':([110,181,],[184,184,]),'class_function_declaration':([110,181,],[185,185,]),'class_procedure_declaration':([110,181,],[186,186,]),'identifier_list':([111,],[191,]),'case_element_list':([173,],[229,]),'case_element':([173,263,],[230,281,]),'case_label_list':([173,263,],[231,231,]),'case_label':([173,263,267,],[232,232,284,]),'index_type':([175,],[234,]),'else_part':([202,],[254,]),'else_clause_optional':([229,],[262,]),'semicolon_optional':([229,293,],[263,298,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON uses_clause_opt block DOT','program',6,'p_program','mini_pascal_parser.py',28),
  ('uses_clause_opt -> uses_clause','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',32),
  ('uses_clause_opt -> empty','uses_clause_opt',1,'p_uses_clause_opt','mini_pascal_parser.py',33),
  ('unit_list -> unit_list COMMA ID','unit_list',3,'p_unit_list','mini_pascal_parser.py',38),
  ('unit_list -> ID','unit_list',1,'p_unit_list','mini_pascal_parser.py',39),
  ('uses_clause -> USES unit_list SEMICOLON','uses_clause',3,'p_uses_clause','mini_pascal_parser.py',43),
  ('block -> declarations compound_statement','block',2,'p_block','mini_pascal_parser.py',48),
  ('declarations -> declaration_list','declarations',1,'p_declarations','mini_pascal_parser.py',53),
  ('declarations -> empty','declarations',1,'p_declarations','mini_pascal_parser.py',54),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','mini_pascal_parser.py',58),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','mini_pascal_parser.py',59),
  ('declaration -> var_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',63),
  ('declaration -> const_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',64),
  ('declaration -> type_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',65),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',66),
  ('declaration -> function_declaration','declaration',1,'p_declaration','mini_pascal_parser.py',67),
  ('var_declaration -> VAR var_declaration_list','var_declaration',2,'p_var_declaration','mini_pascal_parser.py',71),
  ('var_declaration_list -> var_declaration_list var_decl','var_declaration_list',2,'p_var_declaration_list','mini_pascal_parser.py',75),
  ('var_declaration_list -> var_decl','var_declaration_list',1,'p_var_declaration_list','mini_pascal_parser.py',76),
  ('var_decl -> id_list COLON type SEMICOLON','var_decl',4,'p_var_decl','mini_pascal_parser.py',80),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','mini_pascal_parser.py',84),
  ('id_list -> ID','id_list',1,'p_id_list','mini_pascal_parser.py',85),
  ('const_declaration -> CONST const_list','const_declaration',2,'p_const_declaration','mini_pascal_parser.py',89),
  ('const_list -> const_list const_definition SEMICOLON','const_list',3,'p_const_list','mini_pascal_parser.py',93),
  ('const_list -> const_definition SEMICOLON','const_list',2,'p_const_list','mini_pascal_parser.py',94),
  ('const_definition -> ID EQUAL constant','const_definition',3,'p_const_definition','mini_pascal_parser.py',98),
  ('formal_parameter_list_opt -> LPAREN formal_parameter_list RPAREN','formal_parameter_list_opt',3,'p_formal_parameter_list_opt','mini_pascal_parser.py',110),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_parameter_list_opt','mini_pascal_parser.py',111),
  ('formal_parameter_list -> formal_parameter_list SEMICOLON formal_parameter','formal_parameter_list',3,'p_formal_parameter_list','mini_pascal_parser.py',115),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formal_parameter_list','mini_pascal_parser.py',116),
  ('formal_parameter -> id_list COLON type','formal_parameter',3,'p_formal_parameter','mini_pascal_parser.py',120),
  ('type_declaration -> TYPE type_list','type_declaration',2,'p_type_declaration','mini_pascal_parser.py',125),
  ('type_list -> type_list type_definition SEMICOLON','type_list',3,'p_type_list','mini_pascal_parser.py',129),
  ('type_list -> type_definition SEMICOLON','type_list',2,'p_type_list','mini_pascal_parser.py',130),
  ('type_definition -> ID EQUAL type','type_definition',3,'p_type_definition','mini_pascal_parser.py',134),
  ('type -> simple_type','type',1,'p_type','mini_pascal_parser.py',139),
  ('type -> array_type','type',1,'p_type','mini_pascal_parser.py',140),
  ('type -> record_type','type',1,'p_type','mini_pascal_parser.py',141),
  ('type -> class_type','type',1,'p_type','mini_pascal_parser.py',142),
  ('type -> enumerated_type','type',1,'p_type','mini_pascal_parser.py',143),
  ('class_type -> CLASS class_body END','class_type',3,'p_class_type','mini_pascal_parser.py',147),
  ('enumerated_type -> LPAREN identifier_list RPAREN','enumerated_type',3,'p_enumerated_type','mini_pascal_parser.py',151),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list','mini_pascal_parser.py',155),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','mini_pascal_parser.py',156),
  ('class_body -> class_member_list','class_body',1,'p_class_body','mini_pascal_parser.py',160),
  ('class_member_list -> class_member_list class_member','class_member_list',2,'p_class_member_list','mini_pascal_parser.py',164),
  ('class_member_list -> class_member','class_member_list',1,'p_class_member_list','mini_pascal_parser.py',165),
  ('class_member -> class_variable_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',168),
  ('class_member -> constructor_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',169),
  ('class_member -> class_function_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',170),
  ('class_member -> class_procedure_declaration','class_member',1,'p_class_member','mini_pascal_parser.py',171),
  ('class_variable_declaration -> ID COLON type SEMICOLON','class_variable_declaration',4,'p_class_variable_declaration','mini_pascal_parser.py',175),
  ('constructor_declaration -> CONSTRUCTOR ID formal_parameter_list_opt SEMICOLON','constructor_declaration',4,'p_constructor_declaration','mini_pascal_parser.py',179),
  ('class_function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON','class_function_declaration',6,'p_class_function_declaration','mini_pascal_parser.py',182),
  ('function_declaration -> FUNCTION ID formal_parameter_list_opt COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','mini_pascal_parser.py',185),
  ('procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON block SEMICOLON','procedure_declaration',6,'p_procedure_declaration','mini_pascal_parser.py',189),
  ('class_procedure_declaration -> PROCEDURE ID formal_parameter_list_opt SEMICOLON','class_procedure_declaration',4,'p_class_procedure_declaration','mini_pascal_parser.py',194),
  ('simple_type -> subrange_type','simple_type',1,'p_simple_type','mini_pascal_parser.py',199),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','mini_pascal_parser.py',200),
  ('subrange_type -> constant DOTDOT constant','subrange_type',3,'p_subrange_type','mini_pascal_parser.py',204),
  ('array_type -> ARRAY LBRACKET index_type RBRACKET OF type','array_type',6,'p_array_type','mini_pascal_parser.py',208),
  ('index_type -> simple_type','index_type',1,'p_index_type','mini_pascal_parser.py',212),
  ('record_type -> RECORD record_fields END','record_type',3,'p_record_type','mini_pascal_parser.py',216),
  ('record_fields -> field_list','record_fields',1,'p_record_fields','mini_pascal_parser.py',220),
  ('field_list -> field_list field_declaration SEMICOLON','field_list',3,'p_field_list','mini_pascal_parser.py',224),
  ('field_list -> field_declaration SEMICOLON','field_list',2,'p_field_list','mini_pascal_parser.py',225),
  ('field_declaration -> id_list COLON type','field_declaration',3,'p_field_declaration','mini_pascal_parser.py',229),
  ('type_identifier -> ID','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',233),
  ('type_identifier -> predefined_type','type_identifier',1,'p_type_identifier','mini_pascal_parser.py',234),
  ('predefined_type -> INTEGER','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',238),
  ('predefined_type -> REAL','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',239),
  ('predefined_type -> BOOLEAN','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',240),
  ('predefined_type -> STRING','predefined_type',1,'p_predefined_type','mini_pascal_parser.py',241),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','mini_pascal_parser.py',246),
  ('statement_list -> statement','statement_list',1,'p_statement_list','mini_pascal_parser.py',250),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','mini_pascal_parser.py',251),
  ('statement -> simple_statement','statement',1,'p_statement','mini_pascal_parser.py',255),
  ('statement -> structured_statement','statement',1,'p_statement','mini_pascal_parser.py',256),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',260),
  ('simple_statement -> procedure_call_statement','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',261),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','mini_pascal_parser.py',262),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','mini_pascal_parser.py',266),
  ('variable -> ID','variable',1,'p_variable','mini_pascal_parser.py',270),
  ('variable -> variable DOT ID','variable',3,'p_variable','mini_pascal_parser.py',271),
  ('variable -> variable LBRACKET expression_list RBRACKET','variable',4,'p_variable','mini_pascal_parser.py',272),
  ('expression_list -> expression','expression_list',1,'p_expression_list','mini_pascal_parser.py',276),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','mini_pascal_parser.py',277),
  ('procedure_call_statement -> procedure_call','procedure_call_statement',1,'p_procedure_call_statement','mini_pascal_parser.py',281),
  ('procedure_call -> ID LPAREN args_optional RPAREN','procedure_call',4,'p_procedure_call','mini_pascal_parser.py',285),
  ('args -> args COMMA expression','args',3,'p_args','mini_pascal_parser.py',289),
  ('args -> expression','args',1,'p_args','mini_pascal_parser.py',290),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',294),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',295),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',296),
  ('structured_statement -> repeat_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',297),
  ('structured_statement -> for_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',298),
  ('structured_statement -> case_statement','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',299),
  ('structured_statement -> record_assignment','structured_statement',1,'p_structured_statement','mini_pascal_parser.py',300),
  ('if_statement -> IF expression THEN statement else_part','if_statement',5,'p_if_statement','mini_pascal_parser.py',304),
  ('else_part -> ELSE statement','else_part',2,'p_else_part','mini_pascal_parser.py',308),
  ('else_part -> empty','else_part',1,'p_else_part','mini_pascal_parser.py',309),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','mini_pascal_parser.py',313),
  ('repeat_statement -> REPEAT statement_list UNTIL expression','repeat_statement',4,'p_repeat_statement','mini_pascal_parser.py',317),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',321),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','mini_pascal_parser.py',322),
  ('case_statement -> CASE expression OF case_element_list else_clause_optional END','case_statement',6,'p_case_statement','mini_pascal_parser.py',326),
  ('case_element_list -> case_element_list semicolon_optional case_element','case_element_list',3,'p_case_element_list','mini_pascal_parser.py',330),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list','mini_pascal_parser.py',331),
  ('case_element -> case_label_list COLON statement','case_element',3,'p_case_element','mini_pascal_parser.py',335),
  ('case_label_list -> case_label_list COMMA case_label','case_label_list',3,'p_case_label_list','mini_pascal_parser.py',339),
  ('case_label_list -> case_label','case_label_list',1,'p_case_label_list','mini_pascal_parser.py',340),
  ('case_label -> constant','case_label',1,'p_case_label','mini_pascal_parser.py',344),
  ('else_clause_optional -> semicolon_optional ELSE statement semicolon_optional','else_clause_optional',4,'p_else_clause_optional','mini_pascal_parser.py',348),
  ('else_clause_optional -> empty','else_clause_optional',1,'p_else_clause_optional','mini_pascal_parser.py',349),
  ('semicolon_optional -> SEMICOLON','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',353),
  ('semicolon_optional -> empty','semicolon_optional',1,'p_semicolon_optional','mini_pascal_parser.py',354),
  ('record_assignment -> ID DOT ID ASSIGN expression','record_assignment',5,'p_record_assignment','mini_pascal_parser.py',358),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mini_pascal_parser.py',364),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mini_pascal_parser.py',365),
  ('expression -> expression TIMES expression','expression',3,'p_expression','mini_pascal_parser.py',366),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mini_pascal_parser.py',367),
  ('expression -> expression DIVIDE_INT expression','expression',3,'p_expression','mini_pascal_parser.py',368),
  ('expression -> expression MODULO expression','expression',3,'p_expression','mini_pascal_parser.py',369),
  ('expression -> expression SHL expression','expression',3,'p_expression','mini_pascal_parser.py',370),
  ('expression -> expression SHR expression','expression',3,'p_expression','mini_pascal_parser.py',371),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',372),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','mini_pascal_parser.py',373),
  ('expression -> expression LT expression','expression',3,'p_expression','mini_pascal_parser.py',374),
  ('expression -> expression GT expression','expression',3,'p_expression','mini_pascal_parser.py',375),
  ('expression -> expression LE expression','expression',3,'p_expression','mini_pascal_parser.py',376),
  ('expression -> expression GE expression','expression',3,'p_expression','mini_pascal_parser.py',377),
  ('expression -> expression AND expression','expression',3,'p_expression','mini_pascal_parser.py',378),
  ('expression -> expression OR expression','expression',3,'p_expression','mini_pascal_parser.py',379),
  ('expression -> expression XOR expression','expression',3,'p_expression','mini_pascal_parser.py',380),
  ('expression -> NOT expression','expression',2,'p_expression','mini_pascal_parser.py',381),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression','mini_pascal_parser.py',382),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','mini_pascal_parser.py',383),
  ('expression -> function_call','expression',1,'p_expression','mini_pascal_parser.py',384),
  ('expression -> variable','expression',1,'p_expression','mini_pascal_parser.py',385),
  ('expression -> INTEGER_CONST','expression',1,'p_expression','mini_pascal_parser.py',386),
  ('expression -> REAL_CONST','expression',1,'p_expression','mini_pascal_parser.py',387),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','mini_pascal_parser.py',388),
  ('function_call -> ID LPAREN args_optional RPAREN','function_call',4,'p_function_call','mini_pascal_parser.py',393),
  ('args_optional -> args','args_optional',1,'p_args_opt','mini_pascal_parser.py',398),
  ('args_optional -> empty','args_optional',1,'p_args_opt','mini_pascal_parser.py',399),
  ('constant -> UNSIGNED_NUMBER','constant',1,'p_constant','mini_pascal_parser.py',404),
  ('constant -> sign UNSIGNED_NUMBER','constant',2,'p_constant','mini_pascal_parser.py',405),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','mini_pascal_parser.py',406),
  ('constant -> constant_identifier','constant',1,'p_constant','mini_pascal_parser.py',407),
  ('UNSIGNED_NUMBER -> INTEGER_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',411),
  ('UNSIGNED_NUMBER -> REAL_CONST','UNSIGNED_NUMBER',1,'p_unsigned_number','mini_pascal_parser.py',412),
  ('sign -> PLUS','sign',1,'p_sign','mini_pascal_parser.py',416),
  ('sign -> MINUS','sign',1,'p_sign','mini_pascal_parser.py',417),
  ('constant_identifier -> ID','constant_identifier',1,'p_constant_identifier','mini_pascal_parser.py',421),
  ('empty -> <empty>','empty',0,'p_empty','mini_pascal_parser.py',426),
]
